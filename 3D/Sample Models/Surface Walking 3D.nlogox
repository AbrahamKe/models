<?xml version='1.0' encoding='UTF-8'?>
<model xmlns="http://ccl.northwestern.edu/netlogo/netlogox/1">
  <version><![CDATA[NetLogo 3D 6.1.0-M1]]></version>
  <previewCommands>
    <compiled><![CDATA[setup repeat 75 [ go ]]]></compiled>
  </previewCommands>
  <info><![CDATA[## WHAT IS IT?

This model is a 3D version of a surface-walking algorithm used in "Surface Walk 2D". Turtles approximate a user-defined surface using a simple algorithm that considers the turtle's current position relative to neighboring surface patches.

## HOW IT WORKS

Turtles exist in a world that consists of two different kinds of patches: surface and non-surface. Turtles follow two basic rules in order to walk along the patch-defined surface:

1) Look for opposite neighboring patches. If the turtle is currently on a surface patch, it will look for a non-surface one, and vice versa.
2) Of those neighboring patches of opposite type, identify the one that requires the smallest change in turtle angle for the turtle to face.
3) Adjust pitch and heading halfway to the patch that requires the smallest change in angle to face and take a step.

Why does this algorithm work? Consider any perturbation along a flat surface (in the case of 2D, a curve or angle along an otherwise straight line). In order to traverse the perturbation and remain on the surface, a turtle needs to find and remain on the 'edge' of the surface, and maintain its direction while traveling along this edge. Since turtles in NetLogo always report being on only one patch (the one that the center of their body is over), we maintain the turtle's position along the edge by having it search for a patch that is of opposite type to the patch it is positioned over (Rule 1).

Rule 2 enables the turtles to travel along that edge while maintaining their current direction. Consider a surface in 2D: turtles are able to travel along that surface in one of two opposite directions (for example, they can walk along a circle in either a clockwise or counterclockwise direction). If a surface is flat, a turtle need not change its heading at all to continue to travel in the same direction along that surface. But, if the surface is curved or has an angle, then in order to continue to stay along the edge of the surface the turtle must change its heading. If it changes its heading exactly 180 degrees, it will reverse its direction of travel. But whether the angle is concave or convex, it will be of some measure between 0 and 360 degrees (non-inclusive). Then the heading change required to continue along the surface without reversing the direction of travel will be less than that required to reverse direction.

Finally, Rule 3 reduces the 'weaving' effects produced by turtles moving toward surface and non-surface patches in order to remain close to the edge by having turtles actually point only halfway to the patch of interest.

In 3D versions of this surface-walking algorithm, the same rules are used as in the 2D version, but the way to determine the angle between a turtle's current heading and the nearest opposite patch is a little more complicated. Because there are two angle measures, heading and pitch, we use the inverse dot product to determine the angle between a turtle's heading and a given patch. For more detail, it may help to look through the "Trig for Angle Calculations" section of the Code tab or visit the "Geometric Interpretation" of the dot product entry at Wikipedia: https://en.wikipedia.org/wiki/Dot_product.

## HOW TO USE IT

NUMBER-OF-TURTLES: Allows the user to adjust the number of turtles that will appear along the shape surface when SETUP is pressed.
STEP-SIZE: Allows the user to adjust how far each turtle moves forward during each step.
SURFACE-SHAPE: Allows the user to select the surface shape to appear when SETUP is pressed.
COLORED-SURFACE?: Allows user to toggle whether the surface on which turtles will walk is colored red, or is invisible.
SETUP: Sets up the environment by creating a surface and placing turtles along the surface.
GO: Runs the model by asking turtles to walk along the surface.
TRACE: Asks a random turtle to leave a trail.

## THINGS TO NOTICE

Try adjusting STEP-SIZE while the model is running. What happens to the motion of the turtles? What happens to their speed?

Do turtles behave differently on different types of surfaces? Try using the SURFACE-SHAPE chooser to test different shapes. Try creating your own.

Set the SURFACE-SHAPE chooser to "Sphere", and set NUMBER-OF-TURTLES to 1. Run the model and observe the motion of that one turtle over the sphere. Is its motion what you would expect? Try using the TRACE button to trace the turtle's trajectory over the surface, or try different surfaces.

## THINGS TO TRY

What might happen if the STEP-SIZE is set to 1 or larger?

Currently, turtles turn half of the way to the edge patch that they identify. What happens if they turn the whole way?

Select "Mickey Mouse" from the SURFACE-SHAPE chooser. SETUP and tell the model to GO. What happens to turtles when they pass over the acute angles where Mickey's ears meet his head? Try adjusting the STEP-SIZE slider while the model is running to investigate.

When does the surface-walking algorithm fail? Why? Does changing the world's resolution effect turtle motion?

## EXTENDING THE MODEL

Currently, turtles seek the surface edge by seeking patches that are classified in certain ways. Find and implement another way that patches can be identified or that turtles can identify edge patches.

Can there be more than two types or classifications of surface patches? When would this be useful?

Try using `stamp` to trace the trajectory of a turtle over different kids of surfaces. How might one describe surface-walking accuracy?

The surface-walking algorithm used in this model fails for surfaces (or gaps in surfaces) that are only one patch wide. Why? How might this be fixed?

## NETLOGO FEATURES

Note the use of `towards` and `towards-pitch` to compute headings and pitches and `min-one-of` to make a choice between competing patches.

## RELATED MODELS

Surface Walking (2D NetLogo model)

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Wilensky, U. (2007).  NetLogo Surface Walking 3D model.  http://ccl.northwestern.edu/netlogo/models/SurfaceWalking3D.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## COPYRIGHT AND LICENSE

Copyright 2007 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

This is a 3D version of the 2D model Surface Walking.

<!-- 2007 3D -->]]></info>
  <systemDynamics/>
  <modelInfo>
    <title/>
    <subject/>
  </modelInfo>
  <linkShapes>
    <linkShape curviness="0.0" name="default">
      <line stroke-dasharray="0.0,1.0" isVisible="false" offset="-0.2"/>
      <line stroke-dasharray="1.0,0.0" isVisible="true" offset="0.0"/>
      <line stroke-dasharray="0.0,1.0" isVisible="false" offset="0.2"/>
      <indicator editableColorIndex="0" rotatable="true" name="link direction">
        <elements>
          <line marked="true" filled="false" color="#8D8D8D" y2="180" x2="90" y1="150" x1="150"/>
          <line marked="true" filled="false" color="#8D8D8D" y2="180" x2="210" y1="150" x1="150"/>
        </elements>
      </indicator>
    </linkShape>
  </linkShapes>
  <widgets>
    <view bottom="728" right="707" top="0" left="0" frameRate="30.0" showTickCounter="true" fontSize="10">
      <dimensions3d maxPzcor="20" minPzcor="-20" maxPycor="20" minPycor="-20" maxPxcor="20" minPxcor="-20" wrapInZ="true" wrapInY="true" wrapInX="true" patchSize="10.0"/>
      <tickCounterLabel><![CDATA[ticks]]></tickCounterLabel>
    </view>
    <button bottom="262" right="236" top="229" left="13" ticksEnabled="true" forever="true">
      <source><![CDATA[go]]></source>
    </button>
    <button bottom="182" right="236" top="149" left="14" ticksEnabled="false" forever="false">
      <source><![CDATA[setup]]></source>
    </button>
    <chooser bottom="102" right="236" top="57" left="14" currentChoice="0">
      <variable><![CDATA[surface-shape]]></variable>
      <choices>
        <stringChoice><![CDATA[Sphere]]></stringChoice>
        <stringChoice><![CDATA[Cube]]></stringChoice>
        <stringChoice><![CDATA[Convex Shape]]></stringChoice>
        <stringChoice><![CDATA[Mickey Mouse]]></stringChoice>
        <stringChoice><![CDATA[Hollow Cylinder]]></stringChoice>
      </choices>
    </chooser>
    <switch bottom="142" right="236" top="109" left="13" isOn="true">
      <variable><![CDATA[colored-surface?]]></variable>
    </switch>
    <slider bottom="222" right="236" top="189" left="14" direction="horizontal" default="0.25">
      <maximum><![CDATA[0.75]]></maximum>
      <minimum><![CDATA[0.1]]></minimum>
      <step><![CDATA[0.01]]></step>
      <variable><![CDATA[step-size]]></variable>
    </slider>
    <slider bottom="50" right="236" top="17" left="14" direction="horizontal" default="25.0">
      <maximum><![CDATA[100]]></maximum>
      <minimum><![CDATA[1]]></minimum>
      <step><![CDATA[1]]></step>
      <units><![CDATA[turtles]]></units>
      <variable><![CDATA[number-of-turtles]]></variable>
    </slider>
    <button bottom="302" right="236" top="269" left="13" ticksEnabled="true" forever="false">
      <source><![CDATA[trace]]></source>
    </button>
  </widgets>
  <experiments/>
  <shapes>
    <vectorShape editableColorIndex="0" rotatable="true" name="default">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,5 40,250 150,205 260,250"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="airplane">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,0 135,15 120,60 120,105 15,165 15,195 120,180 135,240 105,270 120,285 150,270 180,285 210,270 165,240 180,180 285,195 285,165 180,105 180,60 165,15"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="arrow">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,0 0,150 105,150 105,293 195,293 195,150 300,150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="box">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,285 285,225 285,75 150,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,135 15,75 150,15 285,75"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="15,75 15,225 150,285 150,135"/>
        <line marked="false" filled="false" color="#000000" y2="135" x2="150" y1="285" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="75" x2="15" y1="135" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="75" x2="285" y1="135" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="bug">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="182" cx="96"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="127" cx="110"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="75" cx="110"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="30" x2="80" y1="100" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="30" x2="220" y1="100" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="butterfly">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,165 209,199 225,225 225,255 195,270 165,255 150,240"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,165 89,198 75,225 75,255 105,270 135,255 150,240"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="139,148 100,105 55,90 25,90 10,105 10,135 25,180 40,195 85,194 139,163"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="162,150 200,105 245,90 275,90 290,105 290,135 275,180 260,195 215,195 162,165"/>
        <polygon marked="false" filled="true" color="#000000" points="150,255 135,225 120,150 135,120 150,105 165,120 180,150 165,225"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="90" cx="135"/>
        <line marked="false" filled="false" color="#000000" y2="60" x2="195" y1="105" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="60" x2="105" y1="105" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="car">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="300,180 279,164 261,144 240,135 226,132 213,106 203,84 185,63 159,50 135,50 75,60 0,150 0,165 0,225 300,225 300,180"/>
        <circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="180"/>
        <circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="30"/>
        <polygon marked="false" filled="true" color="#000000" points="162,80 132,78 134,135 209,135 194,105 189,96 180,89"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="47"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="195"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="circle">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="circle 2">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/>
        <circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="cow">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="200,193 197,249 179,249 177,196 166,187 140,189 93,191 78,179 72,211 49,209 48,181 37,149 25,120 25,89 45,72 103,84 179,75 198,76 252,64 272,81 293,103 285,121 255,121 242,118 224,167"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="73,210 86,251 62,249 48,208"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="25,114 16,195 9,204 23,213 25,200 39,123"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="cylinder">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="dot">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="90"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face happy">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <polygon marked="false" filled="true" color="#000000" points="150,255 90,239 62,213 47,191 67,179 90,203 109,218 150,225 192,218 210,203 227,181 251,194 236,217 212,240"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face neutral">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="7" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <rect marked="false" filled="true" color="#000000" height="30" width="180" y="195" x="60"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face sad">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <polygon marked="false" filled="true" color="#000000" points="150,168 90,184 62,210 47,232 67,244 90,220 109,205 150,198 192,205 210,220 227,242 251,229 236,206 212,183"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="fish">
      <elements>
        <polygon marked="false" filled="true" color="#FFFFFF" points="44,131 21,87 15,86 0,120 15,150 0,180 13,214 20,212 45,166"/>
        <polygon marked="false" filled="true" color="#FFFFFF" points="135,195 119,235 95,218 76,210 46,204 60,165"/>
        <polygon marked="false" filled="true" color="#FFFFFF" points="75,45 83,77 71,103 86,114 166,78 135,60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="30,136 151,77 226,81 280,119 292,146 292,160 287,170 270,195 195,210 151,212 30,166"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="106" cx="215"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="flag">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="285" width="15" y="15" x="60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="90,150 270,90 90,30"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="135" x2="90" y1="135" x1="75"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="45" x2="90" y1="45" x1="75"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="flower">
      <elements>
        <polygon marked="false" filled="true" color="#59B03C" points="135,120 165,165 180,210 180,240 150,300 165,300 195,240 195,195 165,135"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="85"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="147" cx="130"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="192"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="85"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="177"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="177"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="70"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="25" cx="130"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="51" cx="96"/>
        <circle marked="false" filled="true" color="#000000" diameter="74" cy="68" cx="113"/>
        <polygon marked="false" filled="true" color="#59B03C" points="189,233 219,188 249,173 279,188 234,218"/>
        <polygon marked="false" filled="true" color="#59B03C" points="180,255 150,210 105,210 75,240 135,240"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="house">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="165" width="210" y="120" x="45"/>
        <rect marked="false" filled="true" color="#000000" height="75" width="60" y="210" x="120"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="15,120 150,15 285,120"/>
        <line marked="false" filled="false" color="#000000" y2="120" x2="270" y1="120" x1="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="leaf">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,210 135,195 120,210 60,210 30,195 60,180 60,165 15,135 30,120 15,105 40,104 45,90 60,90 90,105 105,120 120,120 105,60 120,60 135,30 150,15 165,30 180,60 195,60 180,120 195,120 210,105 240,90 255,90 263,104 285,105 270,120 285,135 240,165 240,180 270,195 240,210 180,210 165,195"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,195 135,240 120,255 105,255 105,285 135,285 165,240 165,195"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="line">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="line half">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="150" x2="150" y1="0" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="link">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="link direction">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="225" x2="30" y1="150" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="225" x2="270" y1="150" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="pentagon">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,15 15,120 60,285 240,285 285,120"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="person">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="5" cx="110"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="105,90 120,195 90,285 105,300 135,300 150,225 165,300 195,300 210,285 180,195 195,90"/>
        <rect marked="true" filled="true" color="#8D8D8D" height="15" width="45" y="79" x="127"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="195,90 240,150 225,180 165,105"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="105,90 60,150 75,180 135,105"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="plant">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="210" width="30" y="90" x="135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,255 90,210 45,195 75,255 135,285"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,255 210,210 255,195 225,255 165,285"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,180 90,135 45,120 75,180 135,210"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,180 165,210 225,180 255,120 210,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,105 90,60 45,45 75,105 135,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,105 165,135 225,105 255,45 210,60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,90 120,45 150,15 180,45 165,90"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="square">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="square 2">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
        <rect marked="false" filled="true" color="#000000" height="180" width="180" y="60" x="60"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="star">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="151,1 185,108 298,108 207,175 242,282 151,216 59,282 94,175 3,108 116,108"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="target">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/>
        <circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="180" cy="60" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="120" cy="90" cx="90"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="tree">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="94" cy="3" cx="118"/>
        <rect marked="false" filled="true" color="#9D6E48" height="105" width="60" y="195" x="120"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="21" cx="65"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="127" cy="41" cx="116"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="45"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="152" cy="74" cx="104"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="triangle">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="triangle 2">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/>
        <polygon marked="false" filled="true" color="#000000" points="151,99 225,223 75,224"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="truck">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="142" width="191" y="45" x="4"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="296,193 296,150 259,134 244,104 208,104 207,194"/>
        <rect marked="false" filled="true" color="#FFFFFF" height="45" width="0" y="60" x="195"/>
        <polygon marked="false" filled="true" color="#000000" points="238,112 252,141 219,141 218,112"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="234"/>
        <rect marked="true" filled="true" color="#8D8D8D" height="9" width="33" y="185" x="181"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="144"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="24"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="24"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="144"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="234"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="turtle">
      <elements>
        <polygon marked="false" filled="true" color="#59B03C" points="215,204 240,233 246,254 228,266 215,252 193,210"/>
        <polygon marked="false" filled="true" color="#59B03C" points="195,90 225,75 245,75 260,89 269,108 261,124 240,105 225,105 210,105"/>
        <polygon marked="false" filled="true" color="#59B03C" points="105,90 75,75 55,75 40,89 31,108 39,124 60,105 75,105 90,105"/>
        <polygon marked="false" filled="true" color="#59B03C" points="132,85 134,64 107,51 108,17 150,2 192,18 192,52 169,65 172,87"/>
        <polygon marked="false" filled="true" color="#59B03C" points="85,204 60,233 54,254 72,266 85,252 107,210"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="119,75 179,75 209,101 224,135 220,225 175,261 128,261 81,224 74,135 88,99"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="wheel">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="294" cy="3" cx="3"/>
        <circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="15" x2="150" y1="285" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="150" x2="285" y1="150" x1="15"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="269" x2="79" y1="40" x1="216"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="221" x2="269" y1="84" x1="40"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="79" x2="269" y1="216" x1="40"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="269" x2="221" y1="40" x1="84"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="x">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="270,75 225,30 30,225 75,270"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="30,75 75,30 270,225 225,270"/>
      </elements>
    </vectorShape>
  </shapes>
  <code><![CDATA[patches-own [ surface? ]

;; ===========================================================================
;; ============================= Main Procedures =============================
;; ===========================================================================

to setup
  clear-all
  ask patches [ set surface? false ]

  if surface-shape = "Sphere"          [ draw-sphere ]
  if surface-shape = "Cube"            [ draw-cube ]
  if surface-shape = "Convex Shape"    [ draw-convex ]
  if surface-shape = "Mickey Mouse"    [ draw-mickey ]
  if surface-shape = "Hollow Cylinder" [ draw-cylinder ]

  if colored-surface?
    [ ask patches with [ surface? ] [ set pcolor gray ] ]

  ask n-of number-of-turtles patches with [ is-border-patch? ]
  [
    sprout 1 [ set size world-width * 0.05 ]
  ]
  reset-ticks
end

to go
  ask turtles [
    sfd 1
  ]
  tick
end

to trace
  ask one-of turtles [ pen-down ]
end

;; ===========================================================================
;; =========================== Surface Walking ===============================
;; ===========================================================================

to sfd [ steps ] ;; turtle procedure
  repeat ( 4 * steps ) [ seek-border ]
end

to seek-border ;; turtle procedure
  face-closest-neighbor neighbors with [ surface? != [surface?] of myself ]
  fd step-size
end

;; how much turtle faces calling patch
to-report pitch-if-facing-caller [ the-patch ] ;; turtle procedure
  report ( towards-pitch the-patch + 180 ) mod 360
end

to-report facing-nearest [ the-turtle ] ;; patch procedure
  let difference 0
  let heading-toward [heading] of the-turtle

  let pitch-toward (towards-pitch the-turtle - 180 ) mod 360
  if not (pxcor = [xcor] of the-turtle and pycor = [ycor] of the-turtle)
    [ set heading-toward (towards the-turtle - 180 ) mod 360 ]

  set difference angle-between [heading] of the-turtle [pitch] of the-turtle heading-toward pitch-toward

  report min list difference (360 - difference)
end

to face-closest-neighbor [ neighbor-subset ] ;; turtle procedure
  let closest-border-patch min-one-of neighbor-subset [ facing-nearest myself ]

  ifelse abs( towards-pitch closest-border-patch - pitch ) <= 180
  [
    set pitch ( towards-pitch closest-border-patch + pitch ) / 2
  ]
  [
    set pitch ( towards-pitch closest-border-patch - 360 + pitch ) / 2
  ]

  if [pxcor] of closest-border-patch != xcor and [pycor] of closest-border-patch != ycor
  [
    ifelse abs( towards closest-border-patch - heading ) <= 180
    [
      set heading ( towards closest-border-patch + heading ) / 2
    ]
    [
      set heading ( towards closest-border-patch - 360 + heading ) / 2
    ]
  ]
end

to-report is-border-patch? ;; patch procedure
  report any? neighbors with [surface? != [surface?] of myself]
end

;; ===========================================================================
;; =========================== Surface Drawing ===============================
;; ===========================================================================

to draw-sphere
  ask patches with [ distancexyz 0 0 0 < ( world-width * .85 / 2 ) ]
    [ set surface? true ]
end


to draw-cube
  ask patches with [ abs( pxcor ) < ( world-width * .75 / 2 ) and
                     abs( pycor ) < ( world-width * .75 / 2 ) and
                     abs( pzcor ) < ( world-width * .75 / 2 ) ]
    [ set surface? true ]
end


to draw-convex
  draw-cube
  ask patches with [ distancexyz 0 0 (     world-width / 2 )
                       < ( world-width * .75 / 2 ) or
                     distancexyz 0 0 ( 0 - world-width / 2 )
                       < ( world-width * .75 / 2 ) ]
    [ set surface? false ]
end


to draw-mickey
  ask patches with [ distancexyz  0 ( 0 - world-width * .2 / 2 ) 0
                       < ( world-width * .65 / 2 ) ]
    [ set surface? true ]
  ask patches with [ distancexyz  ( world-width * .55 / 2 ) ( world-width * .45 / 2 ) 0
                       < ( world-width * .35 / 2 )  ]
    [ set surface? true ]
  ask patches with [ distancexyz  ( 0 - world-width * .55 / 2 ) ( world-width * .45 / 2 ) 0
                       < ( world-width * .35 / 2 )  ]
    [ set surface? true ]
end


to draw-cylinder
  ask patches with [ distancexy 0 0 < ( world-width * 0.75 / 2 ) and
                     distancexy 0 0 > ( world-width * 0.5  / 2 ) ]
    [ set surface? true ]
end


;; ===========================================================================
;; ====================== Trig for Angle Calculations ========================
;; ===========================================================================

to-report xvel [ angle tilt ]
  report sin( angle ) * abs( cos( tilt ) )
end

to-report yvel [ angle tilt ]
  report cos( angle ) * abs( cos( tilt ) )
end

to-report zvel [ tilt ]
  report sin tilt
end

to-report dot-product [ angle1 pitch1 angle2 pitch2 ]
  let x1 ( xvel angle1 pitch1 )
  let y1 ( yvel angle1 pitch1 )
  let z1 ( zvel pitch1 )

  let x2 ( xvel angle2 pitch2 )
  let y2 ( yvel angle2 pitch2 )
  let z2 ( zvel pitch2 )

  ;; to take care of slightly-over or slightly-under dot products
  ;; these break the acos used in "angle-between"
  report min ( list 1 ( max ( list -1 ( ( x1 * x2 ) + ( y1 * y2 ) + ( z1 * z2 ) ) ) ) )
end


to-report angle-between [ angle1 pitch1 angle2 pitch2 ]
  ifelse angle1 = angle2
  [
    report min( list abs( pitch1 - pitch2 ) abs( 360 - ( pitch1 - pitch2 ) ) )
  ][
  ifelse pitch1 = pitch2
  [
    report min( list abs( angle1 - angle2 ) abs( 360 - ( angle1 - angle2 ) ) )
  ][
    report acos( dot-product angle1 pitch1 angle2 pitch2 )
  ] ]
end


; Copyright 2007 Uri Wilensky.
; See Info tab for full copyright and license.]]></code>
  <modelSettings/>
  <hubnet/>
</model>
