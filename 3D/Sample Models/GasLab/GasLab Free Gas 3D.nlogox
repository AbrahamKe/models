<?xml version='1.0' encoding='UTF-8'?>
<model xmlns="http://ccl.northwestern.edu/netlogo/netlogox/1">
  <version><![CDATA[NetLogo 3D 6.1.0-M1]]></version>
  <previewCommands>
    <compiled><![CDATA[set trace? false
setup
orbit-down 45
orbit-right 45
repeat 2000 [ go ]]]></compiled>
  </previewCommands>
  <info><![CDATA[## WHAT IS IT?

This model is a 3D version of the 2D model GasLab Free Gas; it is one in a series of GasLab models.  They use the same basic rules for simulating the behavior of gases.  Each model integrates different features in order to highlight different aspects of gas behavior.

The basic principle of the models is that gas particles are assumed to have two elementary actions: they move and they collide - either with other particles or with any other objects such as walls.

This model is the simplest gas model in the suite of GasLab models.  The particles are moving and colliding with each other with no external constraints, such as gravity or containers. (The world is a torus which means that when a particle hits the edge of the world it "wraps" around to the other side.  The box surrounding the world in the 3D view are not walls but simply mark the edges of the world where the particles will wrap.)

In this model, particles are modeled as perfectly elastic ones with no energy except their kinetic energy -- which is due to their motion.  Collisions between particles are elastic.  Particles are colored according to their speed -- blue for slow, green for medium, and red for high.

## HOW IT WORKS

The basic principle of all GasLab models is the following algorithm (for more details, see the model "GasLab Gas in a Box"):

1) A particle moves in a straight line without changing its speed, unless it collides with another particle or bounces off the wall.
2) Two particles "collide" if their surfaces touch.  In this model, the time at which any collision is about to occur is measured, and particles move forward until the first pair to collide touch one another.  They are collided, and the cycle repeats.
3) The vector of collision for the particles describes the direction of the line connecting their centers.
4) The particles exchange momentum and energy only along this line, conforming to the conservation of momentum and energy for elastic collisions.
5) Each particle is assigned its new speed, direction and energy.

## HOW TO USE IT

Initial settings:
- NUMBER-OF-PARTICLES: the number of gas particles.
- TRACE?: Draws the path of one individual particle.
- COLLIDE?: Turns collisions between particles on and off.
- INIT-PARTICLE-SPEED: the initial speed of each particle -- they all start with the same speed.
- PARTICLE-MASS: the mass of each particle -- they all have the same mass.
- PARTICLE-COLOR: indicates the coloring scheme for the particles.

As in most NetLogo models, the first step is to press SETUP. It puts in the initial conditions you have set with the sliders.  Be sure to wait till the SETUP button stops before pushing GO.
The GO button runs the models again and again.  This is a "forever" button.

Monitors:
- PERCENT FAST, PERCENT MEDIUM, PERCENT SLOW monitors: percent of particles with different speeds: fast (red), medium (green), and slow (blue).
- AVERAGE SPEED: average speed of the particles.
- AVERAGE ENERGY: average kinetic energy of the particles.

Plots:
- SPEED COUNTS: plots the number of particles in each range of speed (fast, medium or slow).
- SPEED HISTOGRAM: speed distribution of all the particles.  The gray line is the average value, and the black line is the initial average.  The displayed values for speed are ten times the actual values.
- ENERGY HISTOGRAM: the distribution of energies of all the particles, calculated as (m*v^2)/2.  The gray line is the average value, and the black line is the initial average.

Initially, all the particles have the same speed but random directions. Therefore the first histogram plots of speed and energy should show only one column each.  As the particles repeatedly collide, they exchange energy and head off in new directions, and the speeds are dispersed -- some particles get faster, some get slower, and the plot will show that change.

## THINGS TO NOTICE

What is happening to the numbers of particles of different colors?  Why are there more blue particles than red ones?

Can you observe collisions and color changes as they happen?  For instance, when a red particle hits a green particle, what color do they each become?

Why does the average speed (avg-speed) drop?  Does this violate conservation of energy?

This gas is in "endless space" -- no boundaries, no obstructions, but still a finite size!  Is there a physical situation like this?

Watch the particle whose path is traced, notice how the path "wraps" around the world. Does the trace resemble Brownian motion? Can you recognize when a collision happens?  What factors affect the frequency of collisions?   What about the "angularity" of the path?  Could you get it to stay "local" or travel all over the world?

In what ways is this model an "idealization" of the real world?

## THINGS TO TRY

Set all the particles in part of the world, or with the same heading -- what happens?  Does this correspond to a physical possibility?

Try different settings, especially the extremes.  Are the histograms different?  Does the trace pattern change?

Are there other interesting quantities to keep track of?

Look up or calculate the REAL number, size, mass and speed of particles in a typical gas.  When you compare those numbers to the ones in the model, are you surprised this model works as well as it does?  What physical phenomena might be observed if there really were a small number of big particles in the space around us?

We often say outer space is a vacuum.  Is that really true?  How many particles would there be in a space the size of this computer?

## EXTENDING THE MODEL

Could you find a way to measure or express the "temperature" of this imaginary gas?  Try to construct a thermometer.

What happens if there are particles of different masses?

How would you define and calculate pressure in this "boundless" space?

What happens if the gas is inside a container instead of a boundless space?

What happens if the collisions are non-elastic?

How does this 3D model differ from the 2D model?

Set up only two particles to collide head-on.  This may help to show how the collision rule works.  Remember that the axis of collision is being randomly chosen each time.

What if some of the particles had a "drift" tendency -- a force pulling them in one direction?  Could you develop a model of a centrifuge, or charged particles in an electric field?

Find a way to monitor how often particles collide, and how far they go, on average, between collisions.  The latter is called the "mean free path".  What factors affect its value?

In what ways is this idealization different from the one used to derive the Maxwell-Boltzmann distribution?  Specifically, what other code could be used to represent the two-body collisions of particles?

If _more_ than two particles arrive on the same patch, the current code says they don't collide.  Is this a mistake?  How does it affect the results?

Is this model valid for fluids in any aspect?  How could it be made to be fluid-like?

## NETLOGO FEATURES

Notice the use of the `histogram` primitive.

## CREDITS AND REFERENCES

This was one of the original Connection Machine StarLogo applications (under the name GPCEE) and is now ported to NetLogo as part of the Participatory Simulations project.

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Wilensky, U. (2006).  NetLogo GasLab Free Gas 3D model.  http://ccl.northwestern.edu/netlogo/models/GasLabFreeGas3D.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## COPYRIGHT AND LICENSE

Copyright 2006 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

This is a 3D version of the 2D model GasLab Free Gas.

<!-- 2006 3D -->]]></info>
  <systemDynamics/>
  <modelInfo>
    <title/>
    <subject/>
  </modelInfo>
  <linkShapes>
    <linkShape curviness="0.0" name="default">
      <line stroke-dasharray="0.0,1.0" isVisible="false" offset="-0.2"/>
      <line stroke-dasharray="1.0,0.0" isVisible="true" offset="0.0"/>
      <line stroke-dasharray="0.0,1.0" isVisible="false" offset="0.2"/>
      <indicator editableColorIndex="0" rotatable="true" name="link direction">
        <elements>
          <line marked="true" filled="false" color="#8D8D8D" y2="180" x2="90" y1="150" x1="150"/>
          <line marked="true" filled="false" color="#8D8D8D" y2="180" x2="210" y1="150" x1="150"/>
        </elements>
      </indicator>
    </linkShape>
  </linkShapes>
  <widgets>
    <view bottom="220" right="245" top="0" left="0" frameRate="30.0" showTickCounter="true" fontSize="10">
      <dimensions3d maxPzcor="5" minPzcor="-5" maxPycor="5" minPycor="-5" maxPxcor="5" minPxcor="-5" wrapInZ="true" wrapInY="true" wrapInX="true" patchSize="5.0"/>
      <tickCounterLabel><![CDATA[ticks]]></tickCounterLabel>
    </view>
    <button bottom="192" right="248" top="159" left="162" ticksEnabled="true" forever="true">
      <source><![CDATA[go]]></source>
    </button>
    <button bottom="192" right="147" top="159" left="64" ticksEnabled="false" forever="false">
      <source><![CDATA[setup]]></source>
    </button>
    <slider bottom="79" right="258" top="46" left="52" direction="horizontal" default="20.0">
      <maximum><![CDATA[50]]></maximum>
      <minimum><![CDATA[1]]></minimum>
      <step><![CDATA[1]]></step>
      <variable><![CDATA[number-of-particles]]></variable>
    </slider>
    <monitor fontSize="11" bottom="56" right="468" top="11" left="328" precision="2">
      <source><![CDATA[avg-speed]]></source>
      <display><![CDATA[average speed]]></display>
    </monitor>
    <plot bottom="506" right="622" top="310" left="328" ymax="10.0" ymin="0.0" xmax="400.0" xmin="0.0" legendOn="true" autoPlotOn="false">
      <display><![CDATA[Energy Histogram]]></display>
      <setup><![CDATA[set-plot-x-range 0 (0.5 * (init-particle-speed * 2) * (init-particle-speed * 2) * particle-mass)
set-plot-y-range 0 ceiling (number-of-particles / 6)]]></setup>
      <update/>
      <pens>
        <pen inLegend="true" color="-2674135" mode="bar" interval="10.0">
          <setup><![CDATA[set-histogram-num-bars 40]]></setup>
          <update><![CDATA[histogram [ energy ] of particles with [ speed > ( 1.5 * 10 ) ]]]></update>
          <display><![CDATA[fast]]></display>
        </pen>
        <pen inLegend="true" color="-10899396" mode="bar" interval="10.0">
          <setup><![CDATA[set-histogram-num-bars 40]]></setup>
          <update><![CDATA[histogram [ energy ] of particles with [ speed < ( 1.5 * 10 ) and speed > ( 0.5 * 10 ) ]]]></update>
          <display><![CDATA[medium]]></display>
        </pen>
        <pen inLegend="true" color="-13345367" mode="bar" interval="10.0">
          <setup><![CDATA[set-histogram-num-bars 40]]></setup>
          <update><![CDATA[histogram [ energy ] of particles with [ speed < ( 0.5 * 10 ) ]]]></update>
          <display><![CDATA[slow]]></display>
        </pen>
        <pen inLegend="true" color="-7500403" mode="line" interval="1.0">
          <setup/>
          <update><![CDATA[plot-pen-reset
draw-vert-line avg-energy]]></update>
          <display><![CDATA[avg-energy]]></display>
        </pen>
        <pen inLegend="true" color="-16777216" mode="line" interval="1.0">
          <setup><![CDATA[draw-vert-line init-avg-energy]]></setup>
          <update/>
          <display><![CDATA[init-avg-energy]]></display>
        </pen>
      </pens>
    </plot>
    <monitor fontSize="11" bottom="309" right="477" top="264" left="328" precision="2">
      <source><![CDATA[avg-energy]]></source>
      <display><![CDATA[average energy]]></display>
    </monitor>
    <plot bottom="506" right="307" top="309" left="13" ymax="100.0" ymin="0.0" xmax="20.0" xmin="0.0" legendOn="true" autoPlotOn="true">
      <display><![CDATA[Speed Counts]]></display>
      <setup/>
      <update/>
      <pens>
        <pen inLegend="true" color="-2674135" mode="line" interval="1.0">
          <setup/>
          <update><![CDATA[plotxy ticks percent-fast]]></update>
          <display><![CDATA[fast]]></display>
        </pen>
        <pen inLegend="true" color="-10899396" mode="line" interval="1.0">
          <setup/>
          <update><![CDATA[plotxy ticks percent-medium]]></update>
          <display><![CDATA[medium]]></display>
        </pen>
        <pen inLegend="true" color="-13345367" mode="line" interval="1.0">
          <setup/>
          <update><![CDATA[plotxy ticks percent-slow]]></update>
          <display><![CDATA[slow]]></display>
        </pen>
      </pens>
    </plot>
    <switch bottom="46" right="155" top="13" left="52" isOn="true">
      <variable><![CDATA[collide?]]></variable>
    </switch>
    <plot bottom="254" right="622" top="57" left="328" ymax="100.0" ymin="0.0" xmax="50.0" xmin="0.0" legendOn="true" autoPlotOn="false">
      <display><![CDATA[Speed Histogram]]></display>
      <setup><![CDATA[set-plot-x-range 0 (init-particle-speed * 2)
set-plot-y-range 0 ceiling (number-of-particles / 6)]]></setup>
      <update/>
      <pens>
        <pen inLegend="true" color="-2674135" mode="bar" interval="5.0">
          <setup><![CDATA[set-histogram-num-bars 40]]></setup>
          <update><![CDATA[histogram [ speed ] of particles with [ speed > ( 1.5 * 10 ) ]]]></update>
          <display><![CDATA[fast]]></display>
        </pen>
        <pen inLegend="true" color="-10899396" mode="bar" interval="5.0">
          <setup><![CDATA[set-histogram-num-bars 40]]></setup>
          <update><![CDATA[histogram [ speed ] of particles with [ speed < ( 1.5 * 10 ) and speed > ( 0.5 * 10 ) ]]]></update>
          <display><![CDATA[medium]]></display>
        </pen>
        <pen inLegend="true" color="-13345367" mode="bar" interval="5.0">
          <setup><![CDATA[set-histogram-num-bars 40]]></setup>
          <update><![CDATA[histogram [ speed ] of particles with [ speed < ( 0.5 * 10 ) ]]]></update>
          <display><![CDATA[slow]]></display>
        </pen>
        <pen inLegend="true" color="-7500403" mode="line" interval="1.0">
          <setup/>
          <update><![CDATA[plot-pen-reset
draw-vert-line avg-speed]]></update>
          <display><![CDATA[avg-speed]]></display>
        </pen>
        <pen inLegend="true" color="-16777216" mode="line" interval="1.0">
          <setup><![CDATA[draw-vert-line init-avg-speed]]></setup>
          <update/>
          <display><![CDATA[init-avg-speed]]></display>
        </pen>
      </pens>
    </plot>
    <monitor fontSize="11" bottom="307" right="103" top="262" left="13" precision="0">
      <source><![CDATA[percent-fast]]></source>
      <display><![CDATA[percent fast]]></display>
    </monitor>
    <monitor fontSize="11" bottom="307" right="203" top="262" left="104" precision="0">
      <source><![CDATA[percent-medium]]></source>
      <display><![CDATA[percent medium]]></display>
    </monitor>
    <monitor fontSize="11" bottom="307" right="304" top="262" left="204" precision="0">
      <source><![CDATA[percent-slow]]></source>
      <display><![CDATA[percent slow]]></display>
    </monitor>
    <switch bottom="46" right="258" top="13" left="155" isOn="false">
      <variable><![CDATA[trace?]]></variable>
    </switch>
    <slider bottom="112" right="258" top="79" left="52" direction="horizontal" default="10.0">
      <maximum><![CDATA[20.0]]></maximum>
      <minimum><![CDATA[1.0]]></minimum>
      <step><![CDATA[1.0]]></step>
      <variable><![CDATA[init-particle-speed]]></variable>
    </slider>
    <slider bottom="145" right="258" top="112" left="52" direction="horizontal" default="2.0">
      <maximum><![CDATA[20.0]]></maximum>
      <minimum><![CDATA[1.0]]></minimum>
      <step><![CDATA[1.0]]></step>
      <variable><![CDATA[particle-mass]]></variable>
    </slider>
    <chooser bottom="253" right="157" top="208" left="19" currentChoice="0">
      <variable><![CDATA[particle-color]]></variable>
      <choices>
        <stringChoice><![CDATA[red-green-blue]]></stringChoice>
        <stringChoice><![CDATA[purple shades]]></stringChoice>
        <stringChoice><![CDATA[one color]]></stringChoice>
      </choices>
    </chooser>
    <button bottom="248" right="267" top="215" left="177" ticksEnabled="false" forever="false">
      <source><![CDATA[clear-drawing]]></source>
      <display><![CDATA[clear trace]]></display>
    </button>
  </widgets>
  <experiments>
    <experiment iterationLimit="150" name="100 runs">
      <setupCode><![CDATA[setup]]></setupCode>
      <goCode><![CDATA[go]]></goCode>
      <metrics>
        <metric><![CDATA[percent-fast]]></metric>
        <metric><![CDATA[percent-medium]]></metric>
        <metric><![CDATA[percent-slow]]></metric>
      </metrics>
      <parameterSet>
        <cartesianProduct>
          <discreteValues variable="trace?">
            <boolean><![CDATA[true]]></boolean>
          </discreteValues>
          <discreteValues variable="particle-mass">
            <number><![CDATA[1.0]]></number>
          </discreteValues>
          <discreteValues variable="number-of-particles">
            <number><![CDATA[50.0]]></number>
          </discreteValues>
          <discreteValues variable="collide?">
            <boolean><![CDATA[true]]></boolean>
          </discreteValues>
          <discreteValues variable="init-particle-speed">
            <number><![CDATA[9.0]]></number>
          </discreteValues>
        </cartesianProduct>
      </parameterSet>
    </experiment>
  </experiments>
  <shapes>
    <vectorShape editableColorIndex="0" rotatable="true" name="default">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,5 40,250 150,205 260,250"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="airplane">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,0 135,15 120,60 120,105 15,165 15,195 120,180 135,240 105,270 120,285 150,270 180,285 210,270 165,240 180,180 285,195 285,165 180,105 180,60 165,15"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="arrow">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,0 0,150 105,150 105,293 195,293 195,150 300,150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="box">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,285 285,225 285,75 150,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,135 15,75 150,15 285,75"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="15,75 15,225 150,285 150,135"/>
        <line marked="false" filled="false" color="#000000" y2="135" x2="150" y1="285" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="75" x2="15" y1="135" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="75" x2="285" y1="135" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="bug">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="182" cx="96"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="127" cx="110"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="75" cx="110"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="30" x2="80" y1="100" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="30" x2="220" y1="100" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="butterfly">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,165 209,199 225,225 225,255 195,270 165,255 150,240"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,165 89,198 75,225 75,255 105,270 135,255 150,240"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="139,148 100,105 55,90 25,90 10,105 10,135 25,180 40,195 85,194 139,163"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="162,150 200,105 245,90 275,90 290,105 290,135 275,180 260,195 215,195 162,165"/>
        <polygon marked="false" filled="true" color="#000000" points="150,255 135,225 120,150 135,120 150,105 165,120 180,150 165,225"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="90" cx="135"/>
        <line marked="false" filled="false" color="#000000" y2="60" x2="195" y1="105" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="60" x2="105" y1="105" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="car">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="300,180 279,164 261,144 240,135 226,132 213,106 203,84 185,63 159,50 135,50 75,60 0,150 0,165 0,225 300,225 300,180"/>
        <circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="180"/>
        <circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="30"/>
        <polygon marked="false" filled="true" color="#000000" points="162,80 132,78 134,135 209,135 194,105 189,96 180,89"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="47"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="195"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="circle">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="240" cy="30" cx="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="circle 2">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="270" cy="16" cx="16"/>
        <circle marked="false" filled="true" color="#000000" diameter="210" cy="46" cx="46"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="clock">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="240" cy="30" cx="30"/>
        <polygon marked="false" filled="true" color="#000000" points="150,31 128,75 143,75 143,150 158,150 158,75 173,75"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="135" cx="135"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="cow">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="200,193 197,249 179,249 177,196 166,187 140,189 93,191 78,179 72,211 49,209 48,181 37,149 25,120 25,89 45,72 103,84 179,75 198,76 252,64 272,81 293,103 285,121 255,121 242,118 224,167"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="73,210 86,251 62,249 48,208"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="25,114 16,195 9,204 23,213 25,200 39,123"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face happy">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <polygon marked="false" filled="true" color="#000000" points="150,255 90,239 62,213 47,191 67,179 90,203 109,218 150,225 192,218 210,203 227,181 251,194 236,217 212,240"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face neutral">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="7" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <rect marked="false" filled="true" color="#000000" height="30" width="180" y="195" x="60"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face sad">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <polygon marked="false" filled="true" color="#000000" points="150,168 90,184 62,210 47,232 67,244 90,220 109,205 150,198 192,205 210,220 227,242 251,229 236,206 212,183"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="fish">
      <elements>
        <polygon marked="false" filled="true" color="#FFFFFF" points="44,131 21,87 15,86 0,120 15,150 0,180 13,214 20,212 45,166"/>
        <polygon marked="false" filled="true" color="#FFFFFF" points="135,195 119,235 95,218 76,210 46,204 60,165"/>
        <polygon marked="false" filled="true" color="#FFFFFF" points="75,45 83,77 71,103 86,114 166,78 135,60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="30,136 151,77 226,81 280,119 292,146 292,160 287,170 270,195 195,210 151,212 30,166"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="106" cx="215"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="flag">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="285" width="15" y="15" x="60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="90,150 270,90 90,30"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="135" x2="90" y1="135" x1="75"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="45" x2="90" y1="45" x1="75"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="flower">
      <elements>
        <polygon marked="false" filled="true" color="#59B03C" points="135,120 165,165 180,210 180,240 150,300 165,300 195,240 195,195 165,135"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="85"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="147" cx="130"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="192"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="85"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="177"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="177"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="70"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="25" cx="130"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="51" cx="96"/>
        <circle marked="false" filled="true" color="#000000" diameter="74" cy="68" cx="113"/>
        <polygon marked="false" filled="true" color="#59B03C" points="189,233 219,188 249,173 279,188 234,218"/>
        <polygon marked="false" filled="true" color="#59B03C" points="180,255 150,210 105,210 75,240 135,240"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="house">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="165" width="210" y="120" x="45"/>
        <rect marked="false" filled="true" color="#000000" height="75" width="60" y="210" x="120"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="15,120 150,15 285,120"/>
        <line marked="false" filled="false" color="#000000" y2="120" x2="270" y1="120" x1="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="leaf">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,210 135,195 120,210 60,210 30,195 60,180 60,165 15,135 30,120 15,105 40,104 45,90 60,90 90,105 105,120 120,120 105,60 120,60 135,30 150,15 165,30 180,60 195,60 180,120 195,120 210,105 240,90 255,90 263,104 285,105 270,120 285,135 240,165 240,180 270,195 240,210 180,210 165,195"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,195 135,240 120,255 105,255 105,285 135,285 165,240 165,195"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="line">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="link">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="link direction">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="225" x2="30" y1="150" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="225" x2="270" y1="150" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="pentagon">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,15 15,120 60,285 240,285 285,120"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="person">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="5" cx="110"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="105,90 120,195 90,285 105,300 135,300 150,225 165,300 195,300 210,285 180,195 195,90"/>
        <rect marked="true" filled="true" color="#8D8D8D" height="15" width="45" y="79" x="127"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="195,90 240,150 225,180 165,105"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="105,90 60,150 75,180 135,105"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="plant">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="210" width="30" y="90" x="135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,255 90,210 45,195 75,255 135,285"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,255 210,210 255,195 225,255 165,285"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,180 90,135 45,120 75,180 135,210"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,180 165,210 225,180 255,120 210,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,105 90,60 45,45 75,105 135,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,105 165,135 225,105 255,45 210,60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,90 120,45 150,15 180,45 165,90"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="square">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="square 2">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
        <rect marked="false" filled="true" color="#000000" height="180" width="180" y="60" x="60"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="star">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="60,270 150,0 240,270 15,105 285,105"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="75,120 105,210 195,210 225,120 150,75"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="target">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/>
        <circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="180" cy="60" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="120" cy="90" cx="90"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="tree">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="94" cy="3" cx="118"/>
        <rect marked="false" filled="true" color="#9D6E48" height="105" width="60" y="195" x="120"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="21" cx="65"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="127" cy="41" cx="116"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="45"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="152" cy="74" cx="104"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="triangle">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="triangle 2">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/>
        <polygon marked="false" filled="true" color="#000000" points="151,99 225,223 75,224"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="truck">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="142" width="191" y="45" x="4"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="296,193 296,150 259,134 244,104 208,104 207,194"/>
        <rect marked="false" filled="true" color="#FFFFFF" height="45" width="0" y="60" x="195"/>
        <polygon marked="false" filled="true" color="#000000" points="238,112 252,141 219,141 218,112"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="234"/>
        <rect marked="true" filled="true" color="#8D8D8D" height="9" width="33" y="185" x="181"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="144"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="24"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="24"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="144"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="234"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="turtle">
      <elements>
        <polygon marked="false" filled="true" color="#59B03C" points="215,204 240,233 246,254 228,266 215,252 193,210"/>
        <polygon marked="false" filled="true" color="#59B03C" points="195,90 225,75 245,75 260,89 269,108 261,124 240,105 225,105 210,105"/>
        <polygon marked="false" filled="true" color="#59B03C" points="105,90 75,75 55,75 40,89 31,108 39,124 60,105 75,105 90,105"/>
        <polygon marked="false" filled="true" color="#59B03C" points="132,85 134,64 107,51 108,17 150,2 192,18 192,52 169,65 172,87"/>
        <polygon marked="false" filled="true" color="#59B03C" points="85,204 60,233 54,254 72,266 85,252 107,210"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="119,75 179,75 209,101 224,135 220,225 175,261 128,261 81,224 74,135 88,99"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="wheel">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="294" cy="3" cx="3"/>
        <circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="15" x2="150" y1="285" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="150" x2="285" y1="150" x1="15"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="269" x2="79" y1="40" x1="216"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="221" x2="269" y1="84" x1="40"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="79" x2="269" y1="216" x1="40"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="269" x2="221" y1="40" x1="84"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="x">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="270,75 225,30 30,225 75,270"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="30,75 75,30 270,225 225,270"/>
      </elements>
    </vectorShape>
  </shapes>
  <code><![CDATA[globals
[
  tick-delta                         ;; how much we advance the tick counter this time through
  max-tick-delta                     ;; the largest tick-delta is allowed to be
  min-tick-delta                     ;; the smallest tick-delta is allowed to be
  init-avg-speed init-avg-energy     ;; initial averages
  avg-speed avg-energy               ;; current averages
  fast medium slow                   ;; current counts
  percent-fast percent-medium        ;; percentage of the counts
  percent-slow                       ;; percentage of the counts

  collision-times                    ;; a list that of times of pending collisions
]

breed [ particles particle ]

particles-own
[
  vx vy vz                   ;; velocities rel axes
  speed mass energy          ;; particle info
  collision-time             ;; to determine when collision is
  collision-with             ;; to determine who the collision is with
  last-collision             ;; so they don't collide with one another many times
]

to setup
  clear-all
  set-default-shape particles "circle"
  set tick-delta .01
  set min-tick-delta .0000001
  make-particles
  check-initial-positions
  update-variables
  set init-avg-speed avg-speed
  set init-avg-energy avg-energy
  reset-ticks
  if trace?
  [ ask one-of particles [ pen-down ] ]
end

to go
  set collision-times [] ;; empty this out for new input
  ask particles
  [
    set collision-time tick-delta
    set collision-with nobody
    if collide? [ detect-collisions ]
  ]

  ifelse( empty? collision-times )
  [ set collision-times lput ( tick-delta ) collision-times ]
  [ set collision-times ( sort collision-times ) ]

    ifelse ( first collision-times ) < tick-delta   ;; if something will collide before the tick
    [
      ask particles [ jump speed * ( first collision-times ) ] ; most particles to first collision
      tick-advance ( first collision-times ) ;; now, collide all the particles that are ready
      ask particles with [ collision-time = ( first collision-times ) ] [
        if collision-with > who [ ;; so that we don't collide the same particles twice
            collide ( turtle collision-with )
            set last-collision collision-with
            ask turtle collision-with [ set last-collision [who] of myself ]
        ]
      ]
    ] [
      ask particles [ jump speed * tick-delta ]
      tick-advance tick-delta
    ]

  ask particles [
    if last-collision != nobody
    [
      if distance turtle last-collision > ( ( ( [size] of turtle last-collision ) / 2 ) + ( size / 2 ) ) * 1.5
      [ set last-collision nobody ]
    ]
  ]

  if floor ticks > floor (ticks - tick-delta) [
    update-variables
    update-plots
  ]

  display
end

to update-variables
  set medium count particles with [ speed < ( 1.5 * 10 ) and speed > ( 0.5 * 10 ) ]
  set slow count particles with [ speed < ( 0.5 * 10 ) ]
  set fast count particles with [ speed > ( 1.5 * 10 ) ]
  set percent-medium (medium / count particles) * 100
  set percent-slow (slow / count particles) * 100
  set percent-fast (fast / count particles) * 100
  set avg-speed  mean [speed] of particles
  set avg-energy  mean [energy] of particles
end


;;;
;;; distance and collision procedures
;;;

to detect-collisions ; particle procedure

;; detect-collisions is a particle procedure that determines the time it takes to the collision between
;; two particles (if one exists).  It solves for the time by representing the equations of motion for
;; distance, velocity, and time in a quadratic equation of the vector components of the relative velocities
;; and changes in position between the two particles and solves for the time until the next collision

  let my-x xcor
  let my-y ycor
  let my-z zcor
  let my-particle-size size
  let my-x-speed (x-velocity heading pitch speed )
  let my-y-speed (y-velocity heading pitch speed )
  let my-z-speed (z-velocity pitch speed )
  let my-last-collision last-collision

  ask other particles with [who != my-last-collision]
  [
    let dpx 0
    let dpy 0
    let dpz 0

    ;; since our world is wrapped, we can't just use calculations like xcor - my-x. Instead, we take the smallest
    ;; of either the wrapped or unwrapped distance for each dimension

    ifelse ( abs ( xcor - my-x ) <= abs ( ( xcor - my-x ) - world-width ) )
      [ set dpx (xcor - my-x) ]
      [ set dpx (xcor - my-x) - world-width ]  ;; relative distance between particles in the x direction
    ifelse ( abs ( ycor - my-y ) <= abs ( ( ycor - my-y ) - world-height ) )
      [ set dpy (ycor - my-y) ]
      [ set dpy (ycor - my-y) - world-height ]    ;; relative distance between particles in the y direction
    ifelse ( abs ( zcor - my-z ) <= abs ( ( zcor - my-z ) - world-depth ) )
      [ set dpz (zcor - my-z) ]
      [ set dpz (zcor - my-z) - world-depth ]       ;; relative distance between particles in the z direction

    let x-speed (x-velocity heading pitch speed ) ;; speed of other particle in the x direction
    let y-speed (y-velocity heading pitch speed ) ;; speed of other particle in the y direction
    let z-speed (z-velocity pitch speed )         ;; speed of other particle in the z direction

    let dvx (x-speed - my-x-speed) ;; relative speed difference between particles in the x direction
    let dvy (y-speed - my-y-speed) ;; relative speed difference between particles in the y direction
    let dvz (z-speed - my-z-speed) ;; relative speed difference between particles in the z direction

    let sum-r (((my-particle-size) / 2 ) + (([size] of self) / 2 )) ;; sum of both particle radii

    ;; To figure out what the difference in position (P1) between two particles at a future time (t) would be,
    ;; one would need to know the current difference in position (P0) between the two particles
    ;; and the current difference in the velocity (V0) between of the two particles.

    ;; The equation that represents the relationship would be:   P1 = P0 + t * V0

    ;; we want find when in time (t), P1 would be equal to the sum of both the particle's radii (sum-r).
    ;; When P1 is equal to is equal to sum-r, the particles will just be touching each other at
    ;; their edges  (a single point of contact).

    ;; Therefore we are looking for when:   sum-r =  P0 + t * V0

    ;; This equation is not a simple linear equation, since P0 and V0 should both have x and y components
    ;;  in their two dimensional vector representation (calculated as dpx, dpy, and dvx, dvy).

    ;; By squaring both sides of the equation, we get:     (sum-r) * (sum-r) =  (P0 + t * V0) * (P0 + t * V0)

    ;;  When expanded gives:   (sum-r ^ 2) = (P0 ^ 2) + (t * PO * V0) + (t * PO * V0) + (t ^ 2 * VO ^ 2)

    ;;  Which can be simplified to:    0 = (P0 ^ 2) - (sum-r ^ 2) + (2 * PO * V0) * t + (VO ^ 2) * t ^ 2

    ;;  Below, we will let p-squared represent:   (P0 ^ 2) - (sum-r ^ 2)
    ;;  and pv represent: (2 * PO * V0)
    ;;  and v-squared represent: (VO ^ 2)

    ;;  then the equation will simplify to:     0 = p-squared + pv * t + v-squared * t^2

    let p-squared   ((dpx * dpx) + (dpy * dpy) + (dpz * dpz)) - (sum-r ^ 2)   ;; p-squared represents difference of the
    ;; square of the radii and the square
    ;; of the initial positions

    let pv  (2 * ((dpx * dvx) + (dpy * dvy) + (dpz * dvz)))  ;;the vector product of the position times the velocity
    let v-squared  ((dvx * dvx) + (dvy * dvy) + (dvz * dvz)) ;; the square of the difference in speeds
    ;; represented as the sum of the squares of the x-component
    ;; and y-component of relative speeds between the two particles

    ;; p-squared, pv, and v-squared are coefficients in the quadratic equation shown above that
    ;; represents how distance between the particles and relative velocity are related to the time,
    ;; t, at which they will next collide (or when their edges will just be touching)

    ;; Any quadratic equation that is the function of time (t), can represented in a general form as:
    ;;   a*t*t + b*t + c = 0,
    ;; where a, b, and c are the coefficients of the three different terms, and has solutions for t
    ;; that can be found by using the quadratic formula.  The quadratic formula states that if a is not 0,
    ;; then there are two solutions for t, either real or complex.

    ;; t is equal to (b +/- sqrt (b^2 - 4*a*c)) / 2*a

    ;; the portion of this equation that is under a square root is referred to here
    ;; as the determinant, d1.   d1 is equal to (b^2 - 4*a*c)
    ;; and:   a = v-squared, b = pv, and c = p-squared.

    let d1 pv ^ 2 -  (4 * v-squared * p-squared)

    ;; the next line next line tells us that a collision will happen in the future if
    ;; the determinant, d1 is >= 0,  since a positive determinant tells us that there is a
    ;; real solution for the quadratic equation.  Quadratic equations can have solutions
    ;; that are not real (they are square roots of negative numbers).  These are referred
    ;; to as imaginary numbers and for many real world systems that the equations represent
    ;; are not real world states the system can actually end up in.

    ;; Once we determine that a real solution exists, we want to take only one of the two
    ;; possible solutions to the quadratic equation, namely the smaller of the two the solutions:

    ;;  (b - sqrt (b^2 - 4*a*c)) / 2*a
    ;;  which is a solution that represents when the particles first touching on their edges.

    ;;  instead of (b + sqrt (b^2 - 4*a*c)) / 2*a
    ;;  which is a solution that represents a time after the particles have penetrated
    ;;  and are coming back out of each other and when they are just touching on their edges.


    let time-to-collision  -1

    if d1 >= 0
      [set time-to-collision (- pv - sqrt d1) / (2 * v-squared) ]        ;;solution for time step

    ;; if time-to-collision is still -1 there is no collision in the future - no valid solution
    ;; note:  negative values for time-to-collision represent where particles would collide
    ;; if allowed to move backward in time.
    ;; if time-to-collision is greater than 1, then we continue to advance the motion
    ;; of the particles along their current trajectories.  They do not collide yet.
    ;; to keep the model from slowing down too much, if the particles are going to collide
    ;; at a time before min-tick-delta, just collide them a min-tick-delta instead

    if ( time-to-collision < tick-delta and time-to-collision > min-tick-delta ) [
      set collision-with ( [who] of myself )
      set collision-time ( time-to-collision )
      set collision-times ( lput ( time-to-collision ) collision-times )
    ]
    if ( time-to-collision < min-tick-delta and time-to-collision > 0 ) [
      set collision-with ( [who] of myself )
      set collision-time ( min-tick-delta )
      set collision-times ( lput ( min-tick-delta ) collision-times )
    ]
  ]
end

to collide [ particle2 ] ;; turtle procedure
  update-component-vectors
  ask particle2 [ update-component-vectors ]

  ;; find heading and pitch from the center of particle1 to the center of particle2
  let t-heading towards particle2
  let t-pitch towards-pitch particle2

  ;; use these to determine the x, y, z components of theta
  let tx x-velocity t-heading t-pitch 1
  let ty y-velocity t-heading t-pitch 1
  let tz z-velocity t-pitch 1

  ;; find the speed of particle1 in the direction of n
  let particle1-to-theta ortho-projection vx vy vz tx ty tz

  ;; express particle1's movement along theta in terms of xyz
  let x1-to-theta particle1-to-theta * tx
  let y1-to-theta particle1-to-theta * ty
  let z1-to-theta particle1-to-theta * tz

  ;; now we can find the x, y and z components of the particle's velocity that
  ;; aren't in the direction of theta by subtracting the x, y, and z
  ;; components of the velocity in the direction of theta from the components
  ;; of the overall velocity of the particle
  let x1-opp-theta ( ( vx ) - ( x1-to-theta ) )
  let y1-opp-theta ( ( vy ) - ( y1-to-theta ) )
  let z1-opp-theta ( ( vz ) - ( z1-to-theta ) )

  ;; do the same for particle2
  let particle2-to-theta ortho-projection [vx] of particle2 [vy] of particle2 [vz] of particle2 tx ty tz

  let x2-to-theta particle2-to-theta * tx
  let y2-to-theta particle2-to-theta * ty
  let z2-to-theta particle2-to-theta * tz

  let x2-opp-theta ( ( [vx] of particle2 ) - ( x2-to-theta ) )
  let y2-opp-theta ( ( [vy] of particle2 ) - ( y2-to-theta ) )
  let z2-opp-theta ( ( [vz] of particle2 ) - ( z2-to-theta ) )

  ;; calculate the velocity of the center of mass along theta
  let vcm ( ( ( mass * particle1-to-theta ) + ( [mass] of particle2 * particle2-to-theta ) )
      / ( mass + [mass] of particle2 ) )

  ;; switch momentums along theta
  set particle1-to-theta (2 * vcm - particle1-to-theta)
  set particle2-to-theta (2 * vcm - particle2-to-theta)

  ;; determine the x, y, z components of each particle's new velocities
  ;; in the direction of theta
  set x1-to-theta particle1-to-theta * tx
  set y1-to-theta particle1-to-theta * ty
  set z1-to-theta particle1-to-theta * tz

  set x2-to-theta particle2-to-theta * tx
  set y2-to-theta particle2-to-theta * ty
  set z2-to-theta particle2-to-theta * tz

  ;; now, we add the new velocities along theta to the unchanged velocities
  ;; opposite theta to determine the new heading, pitch, and speed of each particle
  set vx x1-to-theta + x1-opp-theta
  set vy y1-to-theta + y1-opp-theta
  set vz z1-to-theta + z1-opp-theta
  set heading v-heading vx vy vz
  set pitch v-pitch vx vy vz
  set speed v-speed vx vy vz
  set energy ( 0.5 * mass * speed ^ 2 )
  if particle-color = "red-green-blue" [ recolor ]
  if particle-color = "purple shades" [ recolorshade ]
  if particle-color = "one color" [ recolornone ]

  ask particle2 [
    set vx x2-to-theta + x2-opp-theta
    set vy y2-to-theta + y2-opp-theta
    set vz z2-to-theta + z2-opp-theta
    set heading v-heading vx vy vz
    set pitch v-pitch vx vy vz
    set speed v-speed vx vy vz
    set energy ( 0.5 * mass * speed ^ 2 )
    if particle-color = "red-green-blue" [ recolor ]
    if particle-color = "purple shades" [ recolorshade ]
    if particle-color = "one color" [ recolornone ]
  ]
end


;;;
;;; drawing procedures
;;;

;; creates initial particles
to make-particles
  create-particles number-of-particles
  [
    setup-particle
    random-position
    if particle-color = "red-green-blue" [ recolor ]
    if particle-color = "purple shades" [ recolorshade ]
    if particle-color = "one color" [ recolornone ]
  ]
end

to setup-particle  ;; particle procedure
  set speed init-particle-speed
  set mass particle-mass
  set energy (0.5 * mass * (speed ^ 2))
end

;; makes sure particles aren't overlapped at setup
to check-initial-positions
  let check-again? false
  ask particles [
    if particle-overlap? [
      random-position
      set check-again? true
    ]
  ]
  if check-again? [ check-initial-positions ]
end

to-report particle-overlap? ; particle procedure
  let me ( self )
  let overlap false
  ask other particles [
    if distance ( me ) < ( ( size / 2 ) + ( [size] of me / 2 ) + .1 ) [
      set overlap true
    ]
  ]
  report overlap
end


;; place particle at random location inside the box.
to random-position ;; particle procedure
  setxyz ((1 + min-pxcor) + random-float ((2 * max-pxcor) - 2))
         ((1 + min-pycor) + random-float ((2 * max-pycor) - 2))
         ((1 + min-pzcor) + random-float ((2 * max-pzcor) - 2)) ;; added for 3d
  set heading random-float 360
  set pitch random-float 360
end

to move  ;; particle procedure
  jump (speed * tick-delta)
end

to recolor  ;; particle procedure
  ifelse speed < (0.5 * 10)
  [
    set color blue
  ]
  [
    ifelse speed > (1.5 * 10)
      [ set color red ]
      [ set color green ]
  ]
end

to recolorshade ;; particle procedure
  ifelse speed < 27
  [ set color 111 + speed / 3 ]
  [ set color 119.999 ]
end

to recolornone ;; particle procedure
  set color blue + 1
end


;;;
;;; math procedures
;;;

;; makes sure that the values stored in vx, vy, vz actually reflect
;; the appropriate heading, pitch, speed
to update-component-vectors ;; particle procedure
  set vx ( speed * sin ( heading ) * cos ( pitch ) )
  set vy ( speed * cos ( heading ) * cos ( pitch ) )
  set vz ( speed * sin ( pitch ) )
end

;; reports velocity of a vector at a given angle and pitch
;; in the direction of x.
to-report x-velocity [ vector-angle vector-pitch vector-speed ]
  let xvel sin( vector-angle ) * abs( cos( vector-pitch ) ) * vector-speed
  report xvel
end

;; reports velocity of a vector at a given angle and pitch
;; in the direction of y.
to-report y-velocity [ vector-angle vector-pitch vector-speed ]
  let yvel cos( vector-angle ) * abs( cos( vector-pitch ) ) * vector-speed
  report yvel
end

;; reports velocity of a vector at a given angle and pitch
;; in the direction of z.
to-report z-velocity [ vector-pitch vector-speed ]
  let zvel ( sin( vector-pitch ) * vector-speed )
  report zvel
end

;; reports speed of a vector given xyz coords
to-report v-speed [ x y z ]
  report ( sqrt( x ^ 2 + y ^ 2 + z ^ 2 ) )
end

;; reports xt heading of a vector given xyz coords
to-report v-heading [ x y z ]
  report atan x y
end

;; reports pitch of a vector given xyz coords
to-report v-pitch [ x y z ]
  report round asin ( z / ( v-speed x y z ) )
end

;; called by ortho-projection
to-report dot-product [ x1 y1 z1 x2 y2 z2 ]
  report ( ( x1 * x2 ) + ( y1 * y2 ) + ( z1 * z2 ) )
end

;; component of 1 in the direction of 2 (Note order)
to-report ortho-projection [ x1 y1 z1 x2 y2 z2 ]
  let d-product dot-product x1 y1 z1 x2 y2 z2
  let speed-of-2 ( v-speed x2 y2 z2 )
  ;; if speed is 0 then there's no projection anyway
  ifelse ( speed-of-2 > 0 )
  [ report ( d-product / speed-of-2 ) ]
  [ report 0 ]
end

;;;
;;; plotting procedures
;;;

;; histogram procedure
to draw-vert-line [ xval ]
  plotxy xval plot-y-min
  plot-pen-down
  plotxy xval plot-y-max
  plot-pen-up
end


; Copyright 2006 Uri Wilensky.
; See Info tab for full copyright and license.]]></code>
  <modelSettings/>
  <hubnet/>
</model>
