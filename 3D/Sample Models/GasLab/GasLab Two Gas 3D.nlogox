<?xml version='1.0' encoding='UTF-8'?>
<model xmlns="http://ccl.northwestern.edu/netlogo/netlogox/1">
  <version><![CDATA[NetLogo 3D 6.1.0-M1]]></version>
  <previewCommands>
    <compiled><![CDATA[setup repeat 75 [ go ]]]></compiled>
  </previewCommands>
  <info><![CDATA[## WHAT IS IT?

This model is a 2D version of the 3D model GasLab Two Gas; it is one in a series of GasLab models.  They use the same basic rules for simulating the behavior of gases.  Each model integrates different features in order to highlight different aspects of gas behavior.

The basic principle of the models is that gas particles are assumed to have two elementary actions: they move and they collide - either with other particles or with any other objects such as walls.

This model is the simplest gas model in the suite of GasLab models.  The particles are moving and colliding with each other with no external constraints, such as gravity or containers.  In this model, particles are modeled as perfectly elastic ones with no energy except their kinetic energy -- which is due to their motion.  Collisions between particles are elastic.  Particles are colored according to their speed -- blue for slow, green for medium, and red for high.

## HOW IT WORKS

The basic principle of all GasLab models is the following algorithm (for more details, see the model "GasLab Gas in a Box"):

1) A particle moves in a straight line without changing its speed, unless it collides with another particle or bounces off the wall.
2) Two particles "collide" if their surfaces touch.  In this model, the time at which any collision is about to occur is measured, and particles move forward until the first pair to collide touch one another.  They are collided, and the cycle repeats.
3) The vector of collision for the particles describes the direction of the line connecting their centers.
4) The particles exchange momentum and energy only along this line, conforming to the conservation of momentum and energy for elastic collisions.
5) Each particle is assigned its new speed, direction and energy.

## HOW TO USE IT

- OPEN: opens the door between the two chambers and allows particles to pas through
- CLOSE: closes the door separating the two chambers

- NUM-MAGENTAS and NUM-CYANS: the number of gas particles of each type.
- COLLIDE?: Turns collisions between particles on and off.
- MAGENTA-INIT-SPEED and CYAN-INIT-SPEED: the initial speed of each type of particle -- particles of the same type start with the same speed.
- MAGENTA-MASS and CYAN-MASS: the mass of each type particle -- particles of the same type have the same mass.
- BOX-SIZE: defines the size of the bounding box
- OPENING-SIZE: define the size of the "door" between the two chambers

As in most NetLogo models, the first step is to press SETUP. It puts in the initial conditions you have set with the sliders.  Be sure to wait till the SETUP button stops before pushing GO.
The GO button runs the models again and again.  This is a "forever" button.

Monitors:
MAGENTAS IN LEFT CHAMBER, CYANS IN RIGHT CHAMBER, AVERAGE SPEED MAGENTA and CYAN, and AVERAGE ENERGY MAGENTA and CYAN help you track the changes after the "door" has been opened.

Plots:
- Average Speeds: Shows the change in average speed for each type of particle.
- Average Energy: Shows the change in average energy for each type of particle.

Initially, all the particles have the same speed but random directions. Therefore the first histogram plots of speed and energy should show only one column each.  As the particles repeatedly collide, they exchange energy and head off in new directions, and the speeds are dispersed -- some particles get faster, some get slower, and the plot will show that change.

## THINGS TO NOTICE

What variables affect how quickly the model reaches a new equilibrium when the wall is removed?

Why does the average speed for each color decrease as the model runs with the wall in place, even though the average energy remains constant?

What happens to the relative energies and speeds of each kind of particle as they intermingle?   What effect do the initial speeds and masses have on this relationship?

Does the system reach an equilibrium state?

Do heavier particles tend to have higher or lower speeds when the distribution of energy has reached equilibrium?

Is it reasonable to consider this box "insulated"?

## THINGS TO TRY

Calculate how long the model takes to reach equilibrium with different sizes of windows (holding other parameters constant).

Calculate how long the model takes to reach equilibrium with different particle speeds.

Set the number of cyan particles to zero.  This is a model of a gas expanding into a vacuum.  This experiment was first done by Joule, using two insulated chambers separated by a valve.  He found that the temperature of the gas remained the same when the valve was opened.  Why would this be true? Is this model consistent with that observation?

Try some extreme situations, to test your intuitive understanding:
-- masses the same, speeds of the two particles very different.
-- speeds the same, masses very different.
-- a very small number of one kind of particle -- almost, but not quite a vacuum.  What happens to those few particles, and how do they affect the other kind?

Try relating quantitatively the ratio of the equilibrium speeds of both gases after the wall is opened to the ratio of the masses of both gases.  How are they related?

## EXTENDING THE MODEL

Monitor pressure in the right and left chambers.

Monitor temperature in the right and left chambers.

Replace the partition wall with a moveable piston, so that the two kinds of particles can push against each other without intermingling.  Do they arrive at a different equilibrium then?

Replace the partition wall with a surface that can transmit energy.

Add the histograms of energy and speed distribution (such as found in the "Free Gas" model).

## NETLOGO FEATURES

Notice the use of the `histogram` primitive.

When making 3D shapes, both sides of a shape must be defined or else one side becomes transparent. We use this feature to create a box with opaque inside walls and fencelike outside walls. For more information about 3D shapes, see the NetLogo User Manual.

## CREDITS AND REFERENCES

This was one of the original Connection Machine StarLogo applications (under the name GPCEE) and is now ported to NetLogo as part of the Participatory Simulations project.

## HOW TO CITE

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Wilensky, U. (2007).  NetLogo GasLab Two Gas 3D model.  http://ccl.northwestern.edu/netlogo/models/GasLabTwoGas3D.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## COPYRIGHT AND LICENSE

Copyright 2007 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

This is a 3D version of the 2D model GasLab Two Gas.

<!-- 2007 3D -->]]></info>
  <systemDynamics/>
  <modelInfo>
    <title/>
    <subject/>
  </modelInfo>
  <linkShapes>
    <linkShape curviness="0.0" name="default">
      <line stroke-dasharray="0.0,1.0" isVisible="false" offset="-0.2"/>
      <line stroke-dasharray="1.0,0.0" isVisible="true" offset="0.0"/>
      <line stroke-dasharray="0.0,1.0" isVisible="false" offset="0.2"/>
      <indicator editableColorIndex="0" rotatable="true" name="link direction">
        <elements>
          <line marked="true" filled="false" color="#8D8D8D" y2="180" x2="90" y1="150" x1="150"/>
          <line marked="true" filled="false" color="#8D8D8D" y2="180" x2="210" y1="150" x1="150"/>
        </elements>
      </indicator>
    </linkShape>
  </linkShapes>
  <widgets>
    <view bottom="221" right="245" top="0" left="0" frameRate="30.0" showTickCounter="true" fontSize="10">
      <dimensions3d maxPzcor="5" minPzcor="-5" maxPycor="5" minPycor="-5" maxPxcor="5" minPxcor="-5" wrapInZ="true" wrapInY="true" wrapInX="true" patchSize="5.0"/>
      <tickCounterLabel><![CDATA[ticks]]></tickCounterLabel>
    </view>
    <button bottom="255" right="133" top="222" left="40" ticksEnabled="true" forever="true">
      <source><![CDATA[go]]></source>
    </button>
    <button bottom="222" right="133" top="189" left="40" ticksEnabled="false" forever="false">
      <source><![CDATA[setup]]></source>
    </button>
    <slider bottom="107" right="192" top="74" left="20" direction="horizontal" default="10.0">
      <maximum><![CDATA[50]]></maximum>
      <minimum><![CDATA[1]]></minimum>
      <step><![CDATA[1]]></step>
      <variable><![CDATA[num-magentas]]></variable>
    </slider>
    <plot bottom="413" right="649" top="217" left="388" ymax="500.0" ymin="0.0" xmax="1.0" xmin="0.0" legendOn="true" autoPlotOn="true">
      <display><![CDATA[Average Energies]]></display>
      <setup/>
      <update/>
      <pens>
        <pen inLegend="true" color="-11221820" mode="line" interval="10.0">
          <setup/>
          <update><![CDATA[plotxy ticks avg-energy-cyan]]></update>
          <display><![CDATA[cyan]]></display>
        </pen>
        <pen inLegend="true" color="-5825686" mode="line" interval="10.0">
          <setup/>
          <update><![CDATA[plotxy ticks avg-energy-magenta]]></update>
          <display><![CDATA[magenta]]></display>
        </pen>
      </pens>
    </plot>
    <plot bottom="215" right="649" top="18" left="389" ymax="55.0" ymin="0.0" xmax="1.0" xmin="0.0" legendOn="true" autoPlotOn="false">
      <display><![CDATA[Average Speeds]]></display>
      <setup/>
      <update/>
      <pens>
        <pen inLegend="true" color="-11221820" mode="line" interval="5.0">
          <setup/>
          <update><![CDATA[plotxy ticks avg-speed-cyan]]></update>
          <display><![CDATA[cyan]]></display>
        </pen>
        <pen inLegend="true" color="-5825686" mode="line" interval="5.0">
          <setup/>
          <update><![CDATA[plotxy ticks avg-speed-magenta]]></update>
          <display><![CDATA[magenta]]></display>
        </pen>
      </pens>
    </plot>
    <slider bottom="141" right="192" top="108" left="20" direction="horizontal" default="10.0">
      <maximum><![CDATA[50]]></maximum>
      <minimum><![CDATA[1]]></minimum>
      <step><![CDATA[1]]></step>
      <variable><![CDATA[magenta-init-speed]]></variable>
    </slider>
    <slider bottom="175" right="192" top="142" left="20" direction="horizontal" default="1.0">
      <maximum><![CDATA[10]]></maximum>
      <minimum><![CDATA[1]]></minimum>
      <step><![CDATA[1]]></step>
      <variable><![CDATA[magenta-mass]]></variable>
    </slider>
    <slider bottom="107" right="365" top="74" left="193" direction="horizontal" default="10.0">
      <maximum><![CDATA[50]]></maximum>
      <minimum><![CDATA[1]]></minimum>
      <step><![CDATA[1]]></step>
      <variable><![CDATA[num-cyans]]></variable>
    </slider>
    <slider bottom="141" right="365" top="108" left="193" direction="horizontal" default="46.0">
      <maximum><![CDATA[50]]></maximum>
      <minimum><![CDATA[0]]></minimum>
      <step><![CDATA[1]]></step>
      <variable><![CDATA[cyan-init-speed]]></variable>
    </slider>
    <button bottom="222" right="339" top="189" left="244" ticksEnabled="false" forever="false">
      <source><![CDATA[open-middle]]></source>
      <display><![CDATA[open]]></display>
    </button>
    <button bottom="255" right="339" top="222" left="244" ticksEnabled="false" forever="false">
      <source><![CDATA[close-middle]]></source>
      <display><![CDATA[close]]></display>
    </button>
    <switch bottom="255" right="240" top="222" left="137" isOn="true">
      <variable><![CDATA[collide?]]></variable>
    </switch>
    <slider bottom="73" right="192" top="40" left="20" direction="horizontal" default="85.0">
      <maximum><![CDATA[100]]></maximum>
      <minimum><![CDATA[0]]></minimum>
      <step><![CDATA[1]]></step>
      <units><![CDATA[%]]></units>
      <variable><![CDATA[box-size]]></variable>
    </slider>
    <slider bottom="73" right="365" top="40" left="193" direction="horizontal" default="80.0">
      <maximum><![CDATA[100]]></maximum>
      <minimum><![CDATA[0]]></minimum>
      <step><![CDATA[20]]></step>
      <units><![CDATA[%]]></units>
      <variable><![CDATA[opening-size]]></variable>
    </slider>
    <slider bottom="175" right="366" top="142" left="193" direction="horizontal" default="4.0">
      <maximum><![CDATA[10]]></maximum>
      <minimum><![CDATA[0]]></minimum>
      <step><![CDATA[1]]></step>
      <variable><![CDATA[cyan-mass]]></variable>
    </slider>
    <monitor fontSize="11" bottom="304" right="181" top="259" left="12" precision="3">
      <source><![CDATA[count particles with [ color = magenta and xcor < 0 ]]]></source>
      <display><![CDATA[magentas in left chamber]]></display>
    </monitor>
    <monitor fontSize="11" bottom="304" right="366" top="259" left="187" precision="3">
      <source><![CDATA[count particles with [ color = cyan and xcor > 0 ]]]></source>
      <display><![CDATA[cyans in right chamber]]></display>
    </monitor>
    <monitor fontSize="11" bottom="357" right="366" top="312" left="187" precision="3">
      <source><![CDATA[avg-speed-cyan]]></source>
      <display><![CDATA[average speed cyan]]></display>
    </monitor>
    <monitor fontSize="11" bottom="357" right="181" top="312" left="12" precision="3">
      <source><![CDATA[avg-speed-magenta]]></source>
      <display><![CDATA[average speed magenta]]></display>
    </monitor>
    <monitor fontSize="11" bottom="410" right="366" top="365" left="187" precision="3">
      <source><![CDATA[avg-energy-cyan]]></source>
      <display><![CDATA[average energy cyan]]></display>
    </monitor>
    <monitor fontSize="11" bottom="410" right="181" top="365" left="12" precision="3">
      <source><![CDATA[avg-energy-magenta]]></source>
      <display><![CDATA[average energy magenta]]></display>
    </monitor>
  </widgets>
  <experiments/>
  <shapes>
    <vectorShape editableColorIndex="0" rotatable="true" name="default">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,5 40,250 150,205 260,250"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="airplane">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,0 135,15 120,60 120,105 15,165 15,195 120,180 135,240 105,270 120,285 150,270 180,285 210,270 165,240 180,180 285,195 285,165 180,105 180,60 165,15"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="arrow">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,0 0,150 105,150 105,293 195,293 195,150 300,150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="box">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,285 285,225 285,75 150,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,135 15,75 150,15 285,75"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="15,75 15,225 150,285 150,135"/>
        <line marked="false" filled="false" color="#000000" y2="135" x2="150" y1="285" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="75" x2="15" y1="135" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="75" x2="285" y1="135" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="bug">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="182" cx="96"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="127" cx="110"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="75" cx="110"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="30" x2="80" y1="100" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="30" x2="220" y1="100" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="butterfly">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,165 209,199 225,225 225,255 195,270 165,255 150,240"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,165 89,198 75,225 75,255 105,270 135,255 150,240"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="139,148 100,105 55,90 25,90 10,105 10,135 25,180 40,195 85,194 139,163"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="162,150 200,105 245,90 275,90 290,105 290,135 275,180 260,195 215,195 162,165"/>
        <polygon marked="false" filled="true" color="#000000" points="150,255 135,225 120,150 135,120 150,105 165,120 180,150 165,225"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="90" cx="135"/>
        <line marked="false" filled="false" color="#000000" y2="60" x2="195" y1="105" x1="150"/>
        <line marked="false" filled="false" color="#000000" y2="60" x2="105" y1="105" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="car">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="300,180 279,164 261,144 240,135 226,132 213,106 203,84 185,63 159,50 135,50 75,60 0,150 0,165 0,225 300,225 300,180"/>
        <circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="180"/>
        <circle marked="false" filled="true" color="#000000" diameter="90" cy="180" cx="30"/>
        <polygon marked="false" filled="true" color="#000000" points="162,80 132,78 134,135 209,135 194,105 189,96 180,89"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="47"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="58" cy="195" cx="195"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="circle">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="240" cy="30" cx="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="circle 2">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="270" cy="16" cx="16"/>
        <circle marked="false" filled="true" color="#000000" diameter="210" cy="46" cx="46"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="clock">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="240" cy="30" cx="30"/>
        <polygon marked="false" filled="true" color="#000000" points="150,31 128,75 143,75 143,150 158,150 158,75 173,75"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="135" cx="135"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="cow">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="200,193 197,249 179,249 177,196 166,187 140,189 93,191 78,179 72,211 49,209 48,181 37,149 25,120 25,89 45,72 103,84 179,75 198,76 252,64 272,81 293,103 285,121 255,121 242,118 224,167"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="73,210 86,251 62,249 48,208"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="25,114 16,195 9,204 23,213 25,200 39,123"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="divider">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face happy">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <polygon marked="false" filled="true" color="#000000" points="150,255 90,239 62,213 47,191 67,179 90,203 109,218 150,225 192,218 210,203 227,181 251,194 236,217 212,240"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face neutral">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="7" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <rect marked="false" filled="true" color="#000000" height="30" width="180" y="195" x="60"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="face sad">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="285" cy="8" cx="8"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="60" cy="75" cx="180"/>
        <polygon marked="false" filled="true" color="#000000" points="150,168 90,184 62,210 47,232 67,244 90,220 109,205 150,198 192,205 210,220 227,242 251,229 236,206 212,183"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="fish">
      <elements>
        <polygon marked="false" filled="true" color="#FFFFFF" points="44,131 21,87 15,86 0,120 15,150 0,180 13,214 20,212 45,166"/>
        <polygon marked="false" filled="true" color="#FFFFFF" points="135,195 119,235 95,218 76,210 46,204 60,165"/>
        <polygon marked="false" filled="true" color="#FFFFFF" points="75,45 83,77 71,103 86,114 166,78 135,60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="30,136 151,77 226,81 280,119 292,146 292,160 287,170 270,195 195,210 151,212 30,166"/>
        <circle marked="false" filled="true" color="#000000" diameter="30" cy="106" cx="215"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="flag">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="285" width="15" y="15" x="60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="90,150 270,90 90,30"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="135" x2="90" y1="135" x1="75"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="45" x2="90" y1="45" x1="75"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="flash">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="flower">
      <elements>
        <polygon marked="false" filled="true" color="#59B03C" points="135,120 165,165 180,210 180,240 150,300 165,300 195,240 195,195 165,135"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="85"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="147" cx="130"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="192"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="85"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="40" cx="177"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="132" cx="177"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="85" cx="70"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="38" cy="25" cx="130"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="51" cx="96"/>
        <circle marked="false" filled="true" color="#000000" diameter="74" cy="68" cx="113"/>
        <polygon marked="false" filled="true" color="#59B03C" points="189,233 219,188 249,173 279,188 234,218"/>
        <polygon marked="false" filled="true" color="#59B03C" points="180,255 150,210 105,210 75,240 135,240"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="house">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="165" width="210" y="120" x="45"/>
        <rect marked="false" filled="true" color="#000000" height="75" width="60" y="210" x="120"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="15,120 150,15 285,120"/>
        <line marked="false" filled="false" color="#000000" y2="120" x2="270" y1="120" x1="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="leaf">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,210 135,195 120,210 60,210 30,195 60,180 60,165 15,135 30,120 15,105 40,104 45,90 60,90 90,105 105,120 120,120 105,60 120,60 135,30 150,15 165,30 180,60 195,60 180,120 195,120 210,105 240,90 255,90 263,104 285,105 270,120 285,135 240,165 240,180 270,195 240,210 180,210 165,195"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,195 135,240 120,255 105,255 105,285 135,285 165,240 165,195"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="line">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="link">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="300" x2="150" y1="0" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="link direction">
      <elements>
        <line marked="true" filled="false" color="#8D8D8D" y2="225" x2="30" y1="150" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="225" x2="270" y1="150" x1="150"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="opening20">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
        <rect marked="false" filled="true" color="#000000" height="60" width="60" y="120" x="120"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="opening40">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
        <rect marked="false" filled="true" color="#000000" height="90" width="90" y="105" x="105"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="opening60">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
        <rect marked="false" filled="true" color="#000000" height="120" width="120" y="90" x="90"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="opening80">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
        <rect marked="false" filled="true" color="#000000" height="150" width="150" y="75" x="75"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="pentagon">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,15 15,120 60,285 240,285 285,120"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="person">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="80" cy="5" cx="110"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="105,90 120,195 90,285 105,300 135,300 150,225 165,300 195,300 210,285 180,195 195,90"/>
        <rect marked="true" filled="true" color="#8D8D8D" height="15" width="45" y="79" x="127"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="195,90 240,150 225,180 165,105"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="105,90 60,150 75,180 135,105"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="plant">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="210" width="30" y="90" x="135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,255 90,210 45,195 75,255 135,285"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,255 210,210 255,195 225,255 165,285"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,180 90,135 45,120 75,180 135,210"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,180 165,210 225,180 255,120 210,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,105 90,60 45,45 75,105 135,135"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="165,105 165,135 225,105 255,45 210,60"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="135,90 120,45 150,15 180,45 165,90"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="square">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="square 2">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
        <rect marked="false" filled="true" color="#000000" height="180" width="180" y="60" x="60"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="star">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="60,270 150,0 240,270 15,105 285,105"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="75,120 105,210 195,210 225,120 150,75"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="target">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="300" cy="0" cx="0"/>
        <circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="180" cy="60" cx="60"/>
        <circle marked="false" filled="true" color="#000000" diameter="120" cy="90" cx="90"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="tree">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="94" cy="3" cx="118"/>
        <rect marked="false" filled="true" color="#9D6E48" height="105" width="60" y="195" x="120"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="108" cy="21" cx="65"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="127" cy="41" cx="116"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="120" cy="90" cx="45"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="152" cy="74" cx="104"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="triangle">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="triangle 2">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="150,30 15,255 285,255"/>
        <polygon marked="false" filled="true" color="#000000" points="151,99 225,223 75,224"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="truck">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="142" width="191" y="45" x="4"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="296,193 296,150 259,134 244,104 208,104 207,194"/>
        <rect marked="false" filled="true" color="#FFFFFF" height="45" width="0" y="60" x="195"/>
        <polygon marked="false" filled="true" color="#000000" points="238,112 252,141 219,141 218,112"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="234"/>
        <rect marked="true" filled="true" color="#8D8D8D" height="9" width="33" y="185" x="181"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="144"/>
        <circle marked="false" filled="true" color="#000000" diameter="42" cy="174" cx="24"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="24"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="144"/>
        <circle marked="true" filled="false" color="#8D8D8D" diameter="42" cy="174" cx="234"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="true" name="turtle">
      <elements>
        <polygon marked="false" filled="true" color="#59B03C" points="215,204 240,233 246,254 228,266 215,252 193,210"/>
        <polygon marked="false" filled="true" color="#59B03C" points="195,90 225,75 245,75 260,89 269,108 261,124 240,105 225,105 210,105"/>
        <polygon marked="false" filled="true" color="#59B03C" points="105,90 75,75 55,75 40,89 31,108 39,124 60,105 75,105 90,105"/>
        <polygon marked="false" filled="true" color="#59B03C" points="132,85 134,64 107,51 108,17 150,2 192,18 192,52 169,65 172,87"/>
        <polygon marked="false" filled="true" color="#59B03C" points="85,204 60,233 54,254 72,266 85,252 107,210"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="119,75 179,75 209,101 224,135 220,225 175,261 128,261 81,224 74,135 88,99"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="wall">
      <elements>
        <rect marked="true" filled="true" color="#8D8D8D" height="240" width="240" y="30" x="30"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="wheel">
      <elements>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="294" cy="3" cx="3"/>
        <circle marked="false" filled="true" color="#000000" diameter="240" cy="30" cx="30"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="15" x2="150" y1="285" x1="150"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="150" x2="285" y1="150" x1="15"/>
        <circle marked="true" filled="true" color="#8D8D8D" diameter="60" cy="120" cx="120"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="269" x2="79" y1="40" x1="216"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="221" x2="269" y1="84" x1="40"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="79" x2="269" y1="216" x1="40"/>
        <line marked="true" filled="false" color="#8D8D8D" y2="269" x2="221" y1="40" x1="84"/>
      </elements>
    </vectorShape>
    <vectorShape editableColorIndex="0" rotatable="false" name="x">
      <elements>
        <polygon marked="true" filled="true" color="#8D8D8D" points="270,75 225,30 30,225 75,270"/>
        <polygon marked="true" filled="true" color="#8D8D8D" points="30,75 75,30 270,225 225,270"/>
      </elements>
    </vectorShape>
  </shapes>
  <code><![CDATA[globals
[
  tick-delta                         ;; how much we advance the tick counter this time through
  min-tick-delta                     ;; the smallest tick-delta is allowed to be
  init-avg-speed init-avg-energy     ;; initial averages
  collision-times                    ;; a list that of times of pending collisions

  ;; averages from the end of the last tick
  avg-speed avg-energy
  avg-speed-magenta
  avg-speed-cyan
  avg-energy-magenta
  avg-energy-cyan

  open?                              ;; is there an opening in the divider?
]

breed [ dividers divider ]
breed [ walls wall ]

breed [ particles particle ]
particles-own
[
  vx vy vz                   ;; velocities rel axes
  speed mass energy          ;; particle info
  collision-time             ;; to determine when collision is
  collision-with             ;; to determine who the collision is with
  last-collision             ;; so they don't collide with one another many times
]

to setup
  clear-all
  ;; the wall shape is a custom 3D shape contained in "wall.txt"
  load-shapes-3d "wall.txt"
  set-default-shape particles "circle"
  set-default-shape walls "wall"
  set tick-delta .01
  set min-tick-delta .0000001
  make-box
  make-particles
  update-variables
  set init-avg-speed avg-speed
  set init-avg-energy avg-energy
  set open? false
  set avg-speed-cyan mean [speed] of turtles with [color = cyan]
  set avg-speed-magenta mean [speed] of turtles with [color = magenta]
  set avg-energy-cyan mean [energy] of turtles with [color = cyan]
  set avg-energy-magenta mean [ energy ] of turtles with [color = magenta]
  reset-ticks
end

to go
  set collision-times [] ;; empty this out for new input
  ask particles
  [
    set collision-time tick-delta
    set collision-with nobody
      if collide? [
        detect-collisions
        detect-wall-collisions
      ]
  ]
  set collision-times sort collision-times

  ifelse first collision-times < tick-delta   ;; if something will collide before the tick
  [
    ask particles [ jump speed * first collision-times ] ; most particles to first collision
    tick-advance first collision-times ;; now, collide all the particles that are ready
    ask particles with [ collision-time = first collision-times ]
    [
      ifelse is-particle? collision-with
      [
        if collision-with > self [ ;; so that we don't collide the same particles twice
          collide collision-with
          set last-collision collision-with
          ask collision-with [ set last-collision myself ]
        ]
      ]
      [ wall-collide collision-with ]
    ]
  ]
  [
    ask particles [ jump speed * tick-delta ]
    tick-advance tick-delta
  ]

  ask particles [
    if last-collision != nobody and is-particle? last-collision
    [
      if distance last-collision > ( ( ( [size] of last-collision ) / 2 ) + ( size / 2 ) ) * 1.1
        [ set last-collision nobody ]
    ]
  ]

  if floor ticks > floor (ticks - tick-delta)
    [ update-variables ]

  set avg-speed-cyan mean [speed] of turtles with [color = cyan]
  set avg-speed-magenta mean [speed] of turtles with [color = magenta]
  set avg-energy-cyan mean [energy] of turtles with [color = cyan]
  set avg-energy-magenta mean [energy] of turtles with [color = magenta]

  update-plots
  display
end

to update-variables
  set avg-speed  mean [speed] of particles
  set avg-energy  mean [energy] of particles
end

;;;
;;; distance and collision procedures
;;;

to detect-collisions ;; particle procedure

;; detect-collisions is a particle procedure that determines the time it takes to the collision between
;; two particles (if one exists).  It solves for the time by representing the equations of motion for
;; distance, velocity, and time in a quadratic equation of the vector components of the relative velocities
;; and changes in position between the two particles and solves for the time until the next collision

  let my-x-speed x-velocity heading pitch speed
  let my-y-speed y-velocity heading pitch speed
  let my-z-speed z-velocity pitch speed

  ask other particles with [self != [last-collision] of myself]
  [
    let dpx 0
    let dpy 0
    let dpz 0

   ;; since our world is wrapped, we can't just use calculations like xcor - my-x. Instead, we take the smallest
   ;; of either the wrapped or unwrapped distance for each dimension

    set dpx xcor - [xcor] of myself
    set dpy ycor - [ycor] of myself
    set dpz zcor - [zcor] of myself

    let x-speed x-velocity heading pitch speed  ;; speed of other particle in the x direction
    let y-speed y-velocity heading pitch speed  ;; speed of other particle in the y direction
    let z-speed z-velocity pitch speed          ;; speed of other particle in the z direction

    let dvx x-speed - my-x-speed ;; relative speed difference between particles in the x direction
    let dvy y-speed - my-y-speed ;; relative speed difference between particles in the y direction
    let dvz z-speed - my-z-speed ;; relative speed difference between particles in the z direction

    let sum-r ([size] of myself / 2) + (size / 2) ;; sum of both particle radii

    let p-squared   ((dpx * dpx) + (dpy * dpy) + (dpz * dpz)) - (sum-r ^ 2)   ;; p-squared represents difference of the
                                                                              ;; square of the radii and the square
                                                                              ;; of the initial positions

    let pv 2 * ((dpx * dvx) + (dpy * dvy) + (dpz * dvz))  ;;the vector product of the position times the velocity
    let v-squared (dvx * dvx) + (dvy * dvy) + (dvz * dvz) ;; the square of the difference in speeds
                                                          ;; represented as the sum of the squares of the x-component
                                                          ;; and y-component of relative speeds between the two particles

    ;; p-squared, pv, and v-squared are coefficients in the quadratic equation shown above that
    ;; represents how distance between the particles and relative velocity are related to the time,
    ;; t, at which they will next collide (or when their edges will just be touching)

    let d1 pv ^ 2 -  (4 * v-squared * p-squared)

    let time-to-collision  -1

    if d1 >= 0
      [ set time-to-collision (- pv - sqrt d1) / (2 * v-squared) ]

    if time-to-collision < tick-delta and time-to-collision > min-tick-delta
    [
      set collision-with myself
      set collision-time time-to-collision
      set collision-times lput time-to-collision collision-times
    ]
    if time-to-collision < min-tick-delta and time-to-collision > 0
    [
      set collision-with myself
      set collision-time min-tick-delta
      set collision-times lput min-tick-delta collision-times
    ]
  ]
end

to detect-wall-collisions ;; particle procedure
  update-component-vectors
  let my-vx vx * tick-delta
  let my-vy vy * tick-delta
  let my-vz vz * tick-delta

  detect-wall-collision "xy"
                        ( wall-max-pzcor - ( size / 2 ) )
                        ( wall-min-pzcor + ( size / 2 ) )
                        zcor
                        my-vz
  detect-wall-collision "yz"
                        ( wall-max-pxcor - ( size / 2 ) )
                        ( wall-min-pxcor + ( size / 2 ) )
                        xcor
                        my-vx
  detect-wall-collision "xz"
                        ( wall-max-pycor - ( size / 2 ) )
                        ( wall-min-pycor + ( size / 2 ) )
                        ycor
                        my-vy
  detect-divider-collision

  if collision-time < min-tick-delta [
    set collision-time min-tick-delta
  ]
  set collision-times lput collision-time collision-times
end

;; detect-wall-collision plane of wall, wall cor, wall cor, cor of particle, speed of particle
to detect-wall-collision [ plane max-wall min-wall cor cor-speed ] ;; particle procedure
  if ( cor + cor-speed ) > max-wall or
     ( cor + cor-speed ) < min-wall
  [
    let distance-to-wall abs( max-wall - cor )
    let time-fraction ( distance-to-wall / cor-speed )
    if ( time-fraction * tick-delta ) < collision-time and last-collision != plane
    [
      set collision-time time-fraction * tick-delta
      set collision-with plane
    ]
  ]
end

to detect-divider-collision ;; particle procedure
  let my-vx vx * tick-delta
  if xcor > 0 and my-vx < 0 and ( xcor + my-vx ) < (size / 2)
  [
    let distance-to-wall xcor - (size / 2)
    let time-fraction distance-to-wall / my-vx
    if ( time-fraction * tick-delta ) < collision-time and last-collision != "divider"
    [
      ;; where particle will be once it hits divider
      let future-ycor ycor + ( vy * time-fraction * tick-delta )
      let future-zcor zcor + ( vz * time-fraction * tick-delta )
      if not ( ( abs( future-ycor ) <= ( wall-max-pycor * opening-size / 100 ) and
                 abs( future-zcor ) <= ( wall-max-pzcor * opening-size / 100 ) ) and
               open? )
      [
        set collision-time time-fraction * tick-delta
        set collision-with "divider"
      ]
    ]
  ]
  if xcor < 0 and my-vx > 0 and ( xcor + my-vx ) > (- size / 2)
  [
    let distance-to-wall abs( xcor + (size / 2) )
    let time-fraction distance-to-wall / my-vx
    if ( time-fraction * tick-delta ) < collision-time and last-collision != "divider"
    [
      let future-ycor ycor + ( vy * time-fraction * tick-delta ) ;; where particle will be once it hits divider
      let future-zcor zcor + ( vz * time-fraction * tick-delta )
      if not ( ( abs( future-ycor ) <= ( wall-max-pycor * opening-size / 100 ) and
                 abs( future-zcor ) <= ( wall-max-pzcor * opening-size / 100 ) ) and
               open? )
      [
        set collision-time time-fraction * tick-delta
        set collision-with "divider"
      ]
    ]
  ]
end

to collide [ particle2 ] ;; particle procedure
  update-component-vectors
  ask particle2 [ update-component-vectors ]

  ;; find heading and pitch from the center of particle1 to the center of particle2
  let theading towards particle2
  let tpitch towards-pitch particle2

  ;; use these to determine the x, y, z components of theta
  let tx x-velocity theading tpitch 1
  let ty y-velocity theading tpitch 1
  let tz z-velocity tpitch 1

  ;; find the speed of particle1 in the direction of n
  let particle1-to-theta orth-projection vx vy vz tx ty tz

  ;; express particle1's movement along theta in terms of xyz
  let x1-to-theta particle1-to-theta * tx
  let y1-to-theta particle1-to-theta * ty
  let z1-to-theta particle1-to-theta * tz

  ;; now we can find the x, y and z components of the particle's velocity that
  ;; aren't in the direction of theta by subtracting the x, y, and z
  ;; components of the velocity in the direction of theta from the components
  ;; of the overall velocity of the particle
  let x1-opp-theta vx - x1-to-theta
  let y1-opp-theta vy - y1-to-theta
  let z1-opp-theta vz - z1-to-theta

  ;; do the same for particle2
  let particle2-to-theta orth-projection [vx] of particle2 [vy] of particle2 [vz] of particle2 tx ty tz

  let x2-to-theta particle2-to-theta * tx
  let y2-to-theta particle2-to-theta * ty
  let z2-to-theta particle2-to-theta * tz

  let x2-opp-theta [vx] of particle2 - x2-to-theta
  let y2-opp-theta [vy] of particle2 - y2-to-theta
  let z2-opp-theta [vz] of particle2 - z2-to-theta

  ;; calculate the velocity of the center of mass along theta
  let vcm ( ( mass * particle1-to-theta ) + ( [mass] of particle2 * particle2-to-theta ) )
            / ( mass + [mass] of particle2 )

  ;; switch momentums along theta
  set particle1-to-theta 2 * vcm - particle1-to-theta
  set particle2-to-theta 2 * vcm - particle2-to-theta

  ;; determine the x, y, z components of each particle's new velocities
  ;; in the direction of theta
  set x1-to-theta particle1-to-theta * tx
  set y1-to-theta particle1-to-theta * ty
  set z1-to-theta particle1-to-theta * tz

  set x2-to-theta particle2-to-theta * tx
  set y2-to-theta particle2-to-theta * ty
  set z2-to-theta particle2-to-theta * tz

  ;; now, we add the new velocities along theta to the unchanged velocities
  ;; opposite theta to determine the new heading, pitch, and speed of each particle
  set vx x1-to-theta + x1-opp-theta
  set vy y1-to-theta + y1-opp-theta
  set vz z1-to-theta + z1-opp-theta
  set heading vheading vx vy vz
  set pitch vpitch vx vy vz
  set speed vspeed vx vy vz
  set energy 0.5 * mass * speed ^ 2

  ask particle2 [
    set vx x2-to-theta + x2-opp-theta
    set vy y2-to-theta + y2-opp-theta
    set vz z2-to-theta + z2-opp-theta
    set heading vheading vx vy vz
    set pitch vpitch vx vy vz
    set speed vspeed vx vy vz
    set energy 0.5 * mass * speed ^ 2
  ]
end

to open-middle
  if opening-size = 20 [
    ask dividers [ set shape "opening20" ]
  ]
  if opening-size = 40 [
    ask dividers [ set shape "opening40" ]
  ]
  if opening-size = 60 [
    ask dividers [ set shape "opening60" ]
  ]
  if opening-size = 80 [
    ask dividers [ set shape "opening80" ]
  ]
  if opening-size = 100 [
    ask dividers [ die ]
  ]
  set open? true
end

to close-middle
  ask dividers [ set shape "flash" ]
  set open? false
end

to wall-collide [ collision-wall ] ;; particle procedure
  update-component-vectors

  ifelse collision-wall = "yz"
  [
    set heading vheading (- vx ) vy vz
  ][
  ifelse collision-wall = "xz"
  [
    set heading vheading vx (- vy ) vz
  ][
  ifelse collision-wall = "xy"
  [
    set pitch vpitch vx vy ( - vz )
   ]
   [
     set heading vheading (- vx ) vy vz
   ] ] ]
end

;;;
;;; drawing procedures
;;;

;; creates box
to make-box
  create-walls 1 [ ;; bottom wall
    set heading 0
    set zcor wall-min-pzcor
  ]
  create-walls 1 [ ;; top wall
    set heading 0
    set pitch 180
    set zcor wall-max-pzcor
  ]
  create-walls 1 [ ;; upper wall
    set heading 0
    set pitch 90
    set ycor wall-max-pycor
  ]
  create-walls 1 [ ;; lower wall
    set heading 0
    set pitch -90
    set ycor wall-min-pycor
  ]
  create-walls 1 [ ;; right wall
    set heading 0
    set roll -90
    set xcor wall-max-pxcor
  ]
  create-walls 1 [ ;; left wall
    set heading 0
    set roll 90
    set xcor wall-min-pxcor
  ]
  create-dividers 1 [ ;; center wall
    set heading 0
    set color grey
    set roll 90
    set xcor 0
    set shape "flash"
    set size box-width
  ]
  ask walls [
    set heading 0
    set color grey + random-float 3
    set size box-width
    set shape "wall"
  ]
end

;; creates initial particles
to make-particles
  create-particles num-magentas
  [
    setup-particle magenta-init-speed magenta-mass magenta
    random-position "left-half"
  ]
  create-particles num-cyans
  [
    setup-particle cyan-init-speed cyan-mass cyan
    random-position "right-half"
  ]
  check-initial-positions 0
  check-center-divider
end

to setup-particle [ my-speed my-mass my-color ] ;; particle procedure
  set speed my-speed
  set mass my-mass
  set energy 0.5 * mass * (speed ^ 2)
  set color my-color
  set size mass ^ 0.33
end

;; makes sure particles aren't overlapped at setup
to check-initial-positions [iterations]
  let check-again? false
  ask particles
  [
    if particle-overlap?
    [
      ifelse color = cyan
      [ random-position "right-half" ]
      [ random-position "left-half" ]
      set check-again? true
    ]
  ]
  ifelse iterations < 50
  [
    if check-again?
      [ check-initial-positions iterations + 1 ]
  ]
  [
    beep
    user-message "Not enough room for all these particles!"
  ]
end

;; makes sure particles don't go through center wall at setup
to check-center-divider
  let check-again? false
  ask particles
  [
    if abs( xcor ) < ( size / 2 )
    [
      ifelse color = cyan
      [ random-position "right-half" ]
      [ random-position "left-half" ]
      set check-again? true
    ]
  ]
  if check-again?
  [
    check-initial-positions 0
    check-center-divider
  ]
end
to-report particle-overlap? ;; particle procedure
  report any? other particles with [ distance myself <= ((size + [size] of myself) / 2 ) ]
end

;; place particle at random location inside the box.
to random-position [ side ] ;; particle procedure
  ifelse side = "left-half" [
    setxyz ( random-float ( ( box-width / 2 ) - 2 ) +
             ( wall-min-pxcor + 1 ) )
           ( random-float ( box-height - 2 ) +
             ( wall-min-pycor + 1 ) )
           ( random-float ( box-depth - 2 ) +
             ( wall-min-pzcor + 1 ) )
  ] [
    setxyz ( random-float ( ( box-width / 2 ) - 2 ) +
             ( 1 ) )
           ( random-float ( box-height - 2 ) +
             ( wall-min-pycor + 1 ) )
           ( random-float ( box-depth - 2 ) +
             ( wall-min-pzcor + 1 ) )
  ]
  tilt-up asin (1.0 - random-float 2.0)
  roll-right random-float 360
  update-component-vectors
  set heading vheading vx vy vz
  set pitch vpitch vx vy vz
end

;;;
;;; math procedures
;;;

;; consider the desired box-size
to-report box-width
  report ( world-width - 1 ) * ( box-size / 100 )
end

to-report box-height
  report ( world-height - 1 ) * ( box-size / 100 )
end

to-report box-depth
  report ( world-depth - 1 ) * ( box-size / 100 )
end

to-report wall-max-pxcor
  report max-pxcor * ( box-size / 100 )
end

to-report wall-max-pycor
  report max-pycor * ( box-size / 100 )
end

to-report wall-max-pzcor
  report max-pzcor * ( box-size / 100 )
end

to-report wall-min-pxcor
  report min-pxcor * ( box-size / 100 )
end

to-report wall-min-pycor
  report min-pycor * ( box-size / 100 )
end

to-report wall-min-pzcor
  report min-pzcor * ( box-size / 100 )
end

;; makes sure that the values stored in vx, vy, vz actually reflect
;; the appropriate heading, pitch, speed
to update-component-vectors ;; particle procedure
  set vx x-velocity heading pitch speed
  set vy y-velocity heading pitch speed
  set vz z-velocity pitch speed
end

;; reports velocity of a vector at a given angle and pitch
;; in the direction of x.
to-report x-velocity [ vector-angle vector-pitch vector-speed ]
  report sin( vector-angle ) * abs( cos( vector-pitch ) ) * vector-speed
end

;; reports velocity of a vector at a given angle and pitch
;; in the direction of y.
to-report y-velocity [ vector-angle vector-pitch vector-speed ]
  report cos( vector-angle ) * abs( cos( vector-pitch ) ) * vector-speed
end

;; reports velocity of a vector at a given angle and pitch
;; in the direction of z.
to-report z-velocity [ vector-pitch vector-speed ]
  report sin( vector-pitch ) * vector-speed
end

;; reports speed of a vector given xyz coords
to-report vspeed [ x y z ]
  report sqrt( x ^ 2 + y ^ 2 + z ^ 2 )
end

;; reports xt heading of a vector given xyz coords
to-report vheading [ x y z ]
  report atan x y
end

;; reports pitch of a vector given xyz coords
to-report vpitch [ x y z ]
  report asin ( z / ( vspeed x y z ) )
end

;; called by orthprojection
to-report dot-product [ x1 y1 z1 x2 y2 z2 ]
  report ( x1 * x2 ) + ( y1 * y2 ) + ( z1 * z2 )
end

;; component of 1 in the direction of 2 (Note order)
to-report orth-projection [ x1 y1 z1 x2 y2 z2 ]
  let d-product dot-product x1 y1 z1 x2 y2 z2
  let speed-of-2 vspeed x2 y2 z2
  ;; if speed is 0 then there's no projection anyway
  ifelse speed-of-2 > 0
  [ report d-product / speed-of-2 ]
  [ report 0 ]
end


; Copyright 2007 Uri Wilensky.
; See Info tab for full copyright and license.]]></code>
  <modelSettings/>
  <hubnet/>
</model>
